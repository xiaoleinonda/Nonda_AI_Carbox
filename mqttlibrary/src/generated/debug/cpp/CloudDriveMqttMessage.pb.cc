// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CloudDriveMqttMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CloudDriveMqttMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace io {
namespace nonda {
namespace onedata {
namespace proto {
namespace contract {
class CloudDriveMqttMessageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CloudDriveMqttMessage>
     _instance;
} _CloudDriveMqttMessage_default_instance_;
class CloudDriveMqttBoxStatusDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CloudDriveMqttBoxStatusData>
     _instance;
} _CloudDriveMqttBoxStatusData_default_instance_;
class CloudDriveMqttEventDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CloudDriveMqttEventData>
     _instance;
} _CloudDriveMqttEventData_default_instance_;
class CloudDriveMqttGpsDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CloudDriveMqttGpsData>
     _instance;
} _CloudDriveMqttGpsData_default_instance_;
class CloudDriveMqttGpsDataItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CloudDriveMqttGpsDataItem>
     _instance;
} _CloudDriveMqttGpsDataItem_default_instance_;
class CloudDriveMqttGSensorDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CloudDriveMqttGSensorData>
     _instance;
} _CloudDriveMqttGSensorData_default_instance_;
class CloudDriveMqttGSensorDataItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CloudDriveMqttGSensorDataItem>
     _instance;
} _CloudDriveMqttGSensorDataItem_default_instance_;
class CloudDriveMqttGyroDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CloudDriveMqttGyroData>
     _instance;
} _CloudDriveMqttGyroData_default_instance_;
class CloudDriveMqttGyroDataItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CloudDriveMqttGyroDataItem>
     _instance;
} _CloudDriveMqttGyroDataItem_default_instance_;
class CloudDriveMqttFreqDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CloudDriveMqttFreqData>
     _instance;
} _CloudDriveMqttFreqData_default_instance_;
class CloudDriveMqttFaceDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CloudDriveMqttFaceData>
     _instance;
} _CloudDriveMqttFaceData_default_instance_;
class CloudDriveMqttFaceDataItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CloudDriveMqttFaceDataItem>
     _instance;
} _CloudDriveMqttFaceDataItem_default_instance_;
class CloudDriveMqttEmotionDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CloudDriveMqttEmotionData>
     _instance;
} _CloudDriveMqttEmotionData_default_instance_;
class CloudDriveMqttEmotionDataItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CloudDriveMqttEmotionDataItem>
     _instance;
} _CloudDriveMqttEmotionDataItem_default_instance_;
class CloudDriveMqttLogDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CloudDriveMqttLogData>
     _instance;
} _CloudDriveMqttLogData_default_instance_;
class CloudDriveMqttReportStatusDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CloudDriveMqttReportStatusData>
     _instance;
} _CloudDriveMqttReportStatusData_default_instance_;

namespace protobuf_CloudDriveMqttMessage_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[16];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttMessage, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttMessage, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttMessage, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttBoxStatusData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttBoxStatusData, fw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttBoxStatusData, app_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttBoxStatusData, lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttBoxStatusData, lng_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttBoxStatusData, acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttBoxStatusData, vol_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttEventData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttEventData, fw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttEventData, app_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttEventData, lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttEventData, lng_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttEventData, acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttEventData, vol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttEventData, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttEventData, content_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttGpsData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttGpsData, items_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttGpsDataItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttGpsDataItem, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttGpsDataItem, lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttGpsDataItem, lng_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttGpsDataItem, spd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttGpsDataItem, acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttGpsDataItem, brg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttGSensorData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttGSensorData, items_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttGSensorDataItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttGSensorDataItem, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttGSensorDataItem, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttGSensorDataItem, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttGSensorDataItem, z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttGyroData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttGyroData, items_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttGyroDataItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttGyroDataItem, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttGyroDataItem, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttGyroDataItem, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttGyroDataItem, z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttFreqData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttFreqData, collectfreq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttFreqData, reportfreq_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttFaceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttFaceData, items_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttFaceDataItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttFaceDataItem, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttFaceDataItem, face_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttEmotionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttEmotionData, items_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttEmotionDataItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttEmotionDataItem, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttEmotionDataItem, emotion_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttLogData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttLogData, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttLogData, msg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttReportStatusData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudDriveMqttReportStatusData, type_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(CloudDriveMqttMessage)},
  { 8, -1, sizeof(CloudDriveMqttBoxStatusData)},
  { 19, -1, sizeof(CloudDriveMqttEventData)},
  { 32, -1, sizeof(CloudDriveMqttGpsData)},
  { 38, -1, sizeof(CloudDriveMqttGpsDataItem)},
  { 49, -1, sizeof(CloudDriveMqttGSensorData)},
  { 55, -1, sizeof(CloudDriveMqttGSensorDataItem)},
  { 64, -1, sizeof(CloudDriveMqttGyroData)},
  { 70, -1, sizeof(CloudDriveMqttGyroDataItem)},
  { 79, -1, sizeof(CloudDriveMqttFreqData)},
  { 86, -1, sizeof(CloudDriveMqttFaceData)},
  { 92, -1, sizeof(CloudDriveMqttFaceDataItem)},
  { 99, -1, sizeof(CloudDriveMqttEmotionData)},
  { 105, -1, sizeof(CloudDriveMqttEmotionDataItem)},
  { 112, -1, sizeof(CloudDriveMqttLogData)},
  { 119, -1, sizeof(CloudDriveMqttReportStatusData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CloudDriveMqttMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CloudDriveMqttBoxStatusData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CloudDriveMqttEventData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CloudDriveMqttGpsData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CloudDriveMqttGpsDataItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CloudDriveMqttGSensorData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CloudDriveMqttGSensorDataItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CloudDriveMqttGyroData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CloudDriveMqttGyroDataItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CloudDriveMqttFreqData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CloudDriveMqttFaceData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CloudDriveMqttFaceDataItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CloudDriveMqttEmotionData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CloudDriveMqttEmotionDataItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CloudDriveMqttLogData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CloudDriveMqttReportStatusData_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "CloudDriveMqttMessage.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 16);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fany_2eproto::InitDefaults();
  _CloudDriveMqttMessage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CloudDriveMqttMessage_default_instance_);_CloudDriveMqttBoxStatusData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CloudDriveMqttBoxStatusData_default_instance_);_CloudDriveMqttEventData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CloudDriveMqttEventData_default_instance_);_CloudDriveMqttGpsData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CloudDriveMqttGpsData_default_instance_);_CloudDriveMqttGpsDataItem_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CloudDriveMqttGpsDataItem_default_instance_);_CloudDriveMqttGSensorData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CloudDriveMqttGSensorData_default_instance_);_CloudDriveMqttGSensorDataItem_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CloudDriveMqttGSensorDataItem_default_instance_);_CloudDriveMqttGyroData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CloudDriveMqttGyroData_default_instance_);_CloudDriveMqttGyroDataItem_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CloudDriveMqttGyroDataItem_default_instance_);_CloudDriveMqttFreqData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CloudDriveMqttFreqData_default_instance_);_CloudDriveMqttFaceData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CloudDriveMqttFaceData_default_instance_);_CloudDriveMqttFaceDataItem_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CloudDriveMqttFaceDataItem_default_instance_);_CloudDriveMqttEmotionData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CloudDriveMqttEmotionData_default_instance_);_CloudDriveMqttEmotionDataItem_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CloudDriveMqttEmotionDataItem_default_instance_);_CloudDriveMqttLogData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CloudDriveMqttLogData_default_instance_);_CloudDriveMqttReportStatusData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CloudDriveMqttReportStatusData_default_instance_);_CloudDriveMqttMessage_default_instance_._instance.get_mutable()->data_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\033CloudDriveMqttMessage.proto\022\037io.nonda."
      "onedata.proto.contract\032\031google/protobuf/"
      "any.proto\"V\n\025CloudDriveMqttMessage\022\013\n\003cm"
      "d\030\001 \001(\005\022\014\n\004time\030\002 \001(\003\022\"\n\004data\030\003 \001(\0132\024.go"
      "ogle.protobuf.Any\"j\n\033CloudDriveMqttBoxSt"
      "atusData\022\n\n\002fw\030\001 \001(\t\022\013\n\003app\030\002 \001(\t\022\013\n\003lat"
      "\030\003 \001(\001\022\013\n\003lng\030\004 \001(\001\022\013\n\003acc\030\005 \001(\002\022\013\n\003vol\030"
      "\006 \001(\002\"\205\001\n\027CloudDriveMqttEventData\022\n\n\002fw\030"
      "\001 \001(\t\022\013\n\003app\030\002 \001(\t\022\013\n\003lat\030\003 \001(\001\022\013\n\003lng\030\004"
      " \001(\001\022\013\n\003acc\030\005 \001(\002\022\013\n\003vol\030\006 \001(\002\022\014\n\004type\030\007"
      " \001(\005\022\017\n\007content\030\010 \001(\t\"b\n\025CloudDriveMqttG"
      "psData\022I\n\005items\030\001 \003(\0132:.io.nonda.onedata"
      ".proto.contract.CloudDriveMqttGpsDataIte"
      "m\"j\n\031CloudDriveMqttGpsDataItem\022\014\n\004time\030\001"
      " \001(\003\022\013\n\003lat\030\002 \001(\001\022\013\n\003lng\030\003 \001(\001\022\013\n\003spd\030\004 "
      "\001(\002\022\013\n\003acc\030\005 \001(\002\022\013\n\003brg\030\006 \001(\002\"j\n\031CloudDr"
      "iveMqttGSensorData\022M\n\005items\030\001 \003(\0132>.io.n"
      "onda.onedata.proto.contract.CloudDriveMq"
      "ttGSensorDataItem\"N\n\035CloudDriveMqttGSens"
      "orDataItem\022\014\n\004time\030\001 \001(\003\022\t\n\001x\030\002 \001(\002\022\t\n\001y"
      "\030\003 \001(\002\022\t\n\001z\030\004 \001(\002\"d\n\026CloudDriveMqttGyroD"
      "ata\022J\n\005items\030\001 \003(\0132;.io.nonda.onedata.pr"
      "oto.contract.CloudDriveMqttGyroDataItem\""
      "K\n\032CloudDriveMqttGyroDataItem\022\014\n\004time\030\001 "
      "\001(\003\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\t\n\001z\030\004 \001(\002\"A\n\026"
      "CloudDriveMqttFreqData\022\023\n\013collectFreq\030\001 "
      "\001(\005\022\022\n\nreportFreq\030\002 \001(\005\"d\n\026CloudDriveMqt"
      "tFaceData\022J\n\005items\030\001 \003(\0132;.io.nonda.oned"
      "ata.proto.contract.CloudDriveMqttFaceDat"
      "aItem\"8\n\032CloudDriveMqttFaceDataItem\022\014\n\004t"
      "ime\030\001 \001(\003\022\014\n\004face\030\002 \001(\005\"j\n\031CloudDriveMqt"
      "tEmotionData\022M\n\005items\030\001 \003(\0132>.io.nonda.o"
      "nedata.proto.contract.CloudDriveMqttEmot"
      "ionDataItem\">\n\035CloudDriveMqttEmotionData"
      "Item\022\014\n\004time\030\001 \001(\003\022\017\n\007emotion\030\002 \001(\t\"2\n\025C"
      "loudDriveMqttLogData\022\014\n\004type\030\001 \001(\t\022\013\n\003ms"
      "g\030\002 \001(\t\".\n\036CloudDriveMqttReportStatusDat"
      "a\022\014\n\004type\030\001 \001(\005B\036B\034CloudDriveMqttMessage"
      "Creatorb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1535);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CloudDriveMqttMessage.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_google_2fprotobuf_2fany_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_CloudDriveMqttMessage_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloudDriveMqttMessage::kCmdFieldNumber;
const int CloudDriveMqttMessage::kTimeFieldNumber;
const int CloudDriveMqttMessage::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloudDriveMqttMessage::CloudDriveMqttMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CloudDriveMqttMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.nonda.onedata.proto.contract.CloudDriveMqttMessage)
}
CloudDriveMqttMessage::CloudDriveMqttMessage(const CloudDriveMqttMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::google::protobuf::Any(*from.data_);
  } else {
    data_ = NULL;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&time_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:io.nonda.onedata.proto.contract.CloudDriveMqttMessage)
}

void CloudDriveMqttMessage::SharedCtor() {
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_) -
      reinterpret_cast<char*>(&data_)) + sizeof(cmd_));
  _cached_size_ = 0;
}

CloudDriveMqttMessage::~CloudDriveMqttMessage() {
  // @@protoc_insertion_point(destructor:io.nonda.onedata.proto.contract.CloudDriveMqttMessage)
  SharedDtor();
}

void CloudDriveMqttMessage::SharedDtor() {
  if (this != internal_default_instance()) delete data_;
}

void CloudDriveMqttMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloudDriveMqttMessage::descriptor() {
  protobuf_CloudDriveMqttMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CloudDriveMqttMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CloudDriveMqttMessage& CloudDriveMqttMessage::default_instance() {
  protobuf_CloudDriveMqttMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

CloudDriveMqttMessage* CloudDriveMqttMessage::New(::google::protobuf::Arena* arena) const {
  CloudDriveMqttMessage* n = new CloudDriveMqttMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CloudDriveMqttMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:io.nonda.onedata.proto.contract.CloudDriveMqttMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_) -
      reinterpret_cast<char*>(&time_)) + sizeof(cmd_));
  _internal_metadata_.Clear();
}

bool CloudDriveMqttMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:io.nonda.onedata.proto.contract.CloudDriveMqttMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:io.nonda.onedata.proto.contract.CloudDriveMqttMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:io.nonda.onedata.proto.contract.CloudDriveMqttMessage)
  return false;
#undef DO_
}

void CloudDriveMqttMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:io.nonda.onedata.proto.contract.CloudDriveMqttMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cmd = 1;
  if (this->cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }

  // int64 time = 2;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }

  // .google.protobuf.Any data = 3;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->data_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:io.nonda.onedata.proto.contract.CloudDriveMqttMessage)
}

::google::protobuf::uint8* CloudDriveMqttMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:io.nonda.onedata.proto.contract.CloudDriveMqttMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cmd = 1;
  if (this->cmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }

  // int64 time = 2;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }

  // .google.protobuf.Any data = 3;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->data_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.nonda.onedata.proto.contract.CloudDriveMqttMessage)
  return target;
}

size_t CloudDriveMqttMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.nonda.onedata.proto.contract.CloudDriveMqttMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Any data = 3;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  // int64 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  // int32 cmd = 1;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cmd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloudDriveMqttMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CloudDriveMqttMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CloudDriveMqttMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.nonda.onedata.proto.contract.CloudDriveMqttMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.nonda.onedata.proto.contract.CloudDriveMqttMessage)
    MergeFrom(*source);
  }
}

void CloudDriveMqttMessage::MergeFrom(const CloudDriveMqttMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    mutable_data()->::google::protobuf::Any::MergeFrom(from.data());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.cmd() != 0) {
    set_cmd(from.cmd());
  }
}

void CloudDriveMqttMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudDriveMqttMessage::CopyFrom(const CloudDriveMqttMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudDriveMqttMessage::IsInitialized() const {
  return true;
}

void CloudDriveMqttMessage::Swap(CloudDriveMqttMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloudDriveMqttMessage::InternalSwap(CloudDriveMqttMessage* other) {
  using std::swap;
  swap(data_, other->data_);
  swap(time_, other->time_);
  swap(cmd_, other->cmd_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloudDriveMqttMessage::GetMetadata() const {
  protobuf_CloudDriveMqttMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CloudDriveMqttMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CloudDriveMqttMessage

// int32 cmd = 1;
void CloudDriveMqttMessage::clear_cmd() {
  cmd_ = 0;
}
::google::protobuf::int32 CloudDriveMqttMessage::cmd() const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttMessage.cmd)
  return cmd_;
}
void CloudDriveMqttMessage::set_cmd(::google::protobuf::int32 value) {
  
  cmd_ = value;
  // @@protoc_insertion_point(field_set:io.nonda.onedata.proto.contract.CloudDriveMqttMessage.cmd)
}

// int64 time = 2;
void CloudDriveMqttMessage::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 CloudDriveMqttMessage::time() const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttMessage.time)
  return time_;
}
void CloudDriveMqttMessage::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:io.nonda.onedata.proto.contract.CloudDriveMqttMessage.time)
}

// .google.protobuf.Any data = 3;
bool CloudDriveMqttMessage::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
void CloudDriveMqttMessage::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
const ::google::protobuf::Any& CloudDriveMqttMessage::data() const {
  const ::google::protobuf::Any* p = data_;
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttMessage.data)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
::google::protobuf::Any* CloudDriveMqttMessage::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:io.nonda.onedata.proto.contract.CloudDriveMqttMessage.data)
  return data_;
}
::google::protobuf::Any* CloudDriveMqttMessage::release_data() {
  // @@protoc_insertion_point(field_release:io.nonda.onedata.proto.contract.CloudDriveMqttMessage.data)
  
  ::google::protobuf::Any* temp = data_;
  data_ = NULL;
  return temp;
}
void CloudDriveMqttMessage::set_allocated_data(::google::protobuf::Any* data) {
  delete data_;
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:io.nonda.onedata.proto.contract.CloudDriveMqttMessage.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloudDriveMqttBoxStatusData::kFwFieldNumber;
const int CloudDriveMqttBoxStatusData::kAppFieldNumber;
const int CloudDriveMqttBoxStatusData::kLatFieldNumber;
const int CloudDriveMqttBoxStatusData::kLngFieldNumber;
const int CloudDriveMqttBoxStatusData::kAccFieldNumber;
const int CloudDriveMqttBoxStatusData::kVolFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloudDriveMqttBoxStatusData::CloudDriveMqttBoxStatusData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CloudDriveMqttMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData)
}
CloudDriveMqttBoxStatusData::CloudDriveMqttBoxStatusData(const CloudDriveMqttBoxStatusData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fw_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fw().size() > 0) {
    fw_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fw_);
  }
  app_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.app().size() > 0) {
    app_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_);
  }
  ::memcpy(&lat_, &from.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&vol_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(vol_));
  // @@protoc_insertion_point(copy_constructor:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData)
}

void CloudDriveMqttBoxStatusData::SharedCtor() {
  fw_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vol_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(vol_));
  _cached_size_ = 0;
}

CloudDriveMqttBoxStatusData::~CloudDriveMqttBoxStatusData() {
  // @@protoc_insertion_point(destructor:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData)
  SharedDtor();
}

void CloudDriveMqttBoxStatusData::SharedDtor() {
  fw_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CloudDriveMqttBoxStatusData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloudDriveMqttBoxStatusData::descriptor() {
  protobuf_CloudDriveMqttMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CloudDriveMqttMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CloudDriveMqttBoxStatusData& CloudDriveMqttBoxStatusData::default_instance() {
  protobuf_CloudDriveMqttMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

CloudDriveMqttBoxStatusData* CloudDriveMqttBoxStatusData::New(::google::protobuf::Arena* arena) const {
  CloudDriveMqttBoxStatusData* n = new CloudDriveMqttBoxStatusData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CloudDriveMqttBoxStatusData::Clear() {
// @@protoc_insertion_point(message_clear_start:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fw_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vol_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(vol_));
  _internal_metadata_.Clear();
}

bool CloudDriveMqttBoxStatusData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string fw = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fw()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fw().data(), static_cast<int>(this->fw().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData.fw"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string app = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->app().data(), static_cast<int>(this->app().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData.app"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lng = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lng_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float acc = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vol = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData)
  return false;
#undef DO_
}

void CloudDriveMqttBoxStatusData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fw = 1;
  if (this->fw().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fw().data(), static_cast<int>(this->fw().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData.fw");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fw(), output);
  }

  // string app = 2;
  if (this->app().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app().data(), static_cast<int>(this->app().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData.app");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->app(), output);
  }

  // double lat = 3;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lat(), output);
  }

  // double lng = 4;
  if (this->lng() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->lng(), output);
  }

  // float acc = 5;
  if (this->acc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->acc(), output);
  }

  // float vol = 6;
  if (this->vol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->vol(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData)
}

::google::protobuf::uint8* CloudDriveMqttBoxStatusData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fw = 1;
  if (this->fw().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fw().data(), static_cast<int>(this->fw().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData.fw");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fw(), target);
  }

  // string app = 2;
  if (this->app().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app().data(), static_cast<int>(this->app().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData.app");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->app(), target);
  }

  // double lat = 3;
  if (this->lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lat(), target);
  }

  // double lng = 4;
  if (this->lng() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->lng(), target);
  }

  // float acc = 5;
  if (this->acc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->acc(), target);
  }

  // float vol = 6;
  if (this->vol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->vol(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData)
  return target;
}

size_t CloudDriveMqttBoxStatusData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string fw = 1;
  if (this->fw().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fw());
  }

  // string app = 2;
  if (this->app().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->app());
  }

  // double lat = 3;
  if (this->lat() != 0) {
    total_size += 1 + 8;
  }

  // double lng = 4;
  if (this->lng() != 0) {
    total_size += 1 + 8;
  }

  // float acc = 5;
  if (this->acc() != 0) {
    total_size += 1 + 4;
  }

  // float vol = 6;
  if (this->vol() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloudDriveMqttBoxStatusData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData)
  GOOGLE_DCHECK_NE(&from, this);
  const CloudDriveMqttBoxStatusData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CloudDriveMqttBoxStatusData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData)
    MergeFrom(*source);
  }
}

void CloudDriveMqttBoxStatusData::MergeFrom(const CloudDriveMqttBoxStatusData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fw().size() > 0) {

    fw_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fw_);
  }
  if (from.app().size() > 0) {

    app_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_);
  }
  if (from.lat() != 0) {
    set_lat(from.lat());
  }
  if (from.lng() != 0) {
    set_lng(from.lng());
  }
  if (from.acc() != 0) {
    set_acc(from.acc());
  }
  if (from.vol() != 0) {
    set_vol(from.vol());
  }
}

void CloudDriveMqttBoxStatusData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudDriveMqttBoxStatusData::CopyFrom(const CloudDriveMqttBoxStatusData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudDriveMqttBoxStatusData::IsInitialized() const {
  return true;
}

void CloudDriveMqttBoxStatusData::Swap(CloudDriveMqttBoxStatusData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloudDriveMqttBoxStatusData::InternalSwap(CloudDriveMqttBoxStatusData* other) {
  using std::swap;
  fw_.Swap(&other->fw_);
  app_.Swap(&other->app_);
  swap(lat_, other->lat_);
  swap(lng_, other->lng_);
  swap(acc_, other->acc_);
  swap(vol_, other->vol_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloudDriveMqttBoxStatusData::GetMetadata() const {
  protobuf_CloudDriveMqttMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CloudDriveMqttMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CloudDriveMqttBoxStatusData

// string fw = 1;
void CloudDriveMqttBoxStatusData::clear_fw() {
  fw_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CloudDriveMqttBoxStatusData::fw() const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData.fw)
  return fw_.GetNoArena();
}
void CloudDriveMqttBoxStatusData::set_fw(const ::std::string& value) {
  
  fw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData.fw)
}
#if LANG_CXX11
void CloudDriveMqttBoxStatusData::set_fw(::std::string&& value) {
  
  fw_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData.fw)
}
#endif
void CloudDriveMqttBoxStatusData::set_fw(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData.fw)
}
void CloudDriveMqttBoxStatusData::set_fw(const char* value, size_t size) {
  
  fw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData.fw)
}
::std::string* CloudDriveMqttBoxStatusData::mutable_fw() {
  
  // @@protoc_insertion_point(field_mutable:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData.fw)
  return fw_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CloudDriveMqttBoxStatusData::release_fw() {
  // @@protoc_insertion_point(field_release:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData.fw)
  
  return fw_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CloudDriveMqttBoxStatusData::set_allocated_fw(::std::string* fw) {
  if (fw != NULL) {
    
  } else {
    
  }
  fw_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fw);
  // @@protoc_insertion_point(field_set_allocated:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData.fw)
}

// string app = 2;
void CloudDriveMqttBoxStatusData::clear_app() {
  app_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CloudDriveMqttBoxStatusData::app() const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData.app)
  return app_.GetNoArena();
}
void CloudDriveMqttBoxStatusData::set_app(const ::std::string& value) {
  
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData.app)
}
#if LANG_CXX11
void CloudDriveMqttBoxStatusData::set_app(::std::string&& value) {
  
  app_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData.app)
}
#endif
void CloudDriveMqttBoxStatusData::set_app(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData.app)
}
void CloudDriveMqttBoxStatusData::set_app(const char* value, size_t size) {
  
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData.app)
}
::std::string* CloudDriveMqttBoxStatusData::mutable_app() {
  
  // @@protoc_insertion_point(field_mutable:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData.app)
  return app_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CloudDriveMqttBoxStatusData::release_app() {
  // @@protoc_insertion_point(field_release:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData.app)
  
  return app_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CloudDriveMqttBoxStatusData::set_allocated_app(::std::string* app) {
  if (app != NULL) {
    
  } else {
    
  }
  app_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app);
  // @@protoc_insertion_point(field_set_allocated:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData.app)
}

// double lat = 3;
void CloudDriveMqttBoxStatusData::clear_lat() {
  lat_ = 0;
}
double CloudDriveMqttBoxStatusData::lat() const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData.lat)
  return lat_;
}
void CloudDriveMqttBoxStatusData::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData.lat)
}

// double lng = 4;
void CloudDriveMqttBoxStatusData::clear_lng() {
  lng_ = 0;
}
double CloudDriveMqttBoxStatusData::lng() const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData.lng)
  return lng_;
}
void CloudDriveMqttBoxStatusData::set_lng(double value) {
  
  lng_ = value;
  // @@protoc_insertion_point(field_set:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData.lng)
}

// float acc = 5;
void CloudDriveMqttBoxStatusData::clear_acc() {
  acc_ = 0;
}
float CloudDriveMqttBoxStatusData::acc() const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData.acc)
  return acc_;
}
void CloudDriveMqttBoxStatusData::set_acc(float value) {
  
  acc_ = value;
  // @@protoc_insertion_point(field_set:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData.acc)
}

// float vol = 6;
void CloudDriveMqttBoxStatusData::clear_vol() {
  vol_ = 0;
}
float CloudDriveMqttBoxStatusData::vol() const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData.vol)
  return vol_;
}
void CloudDriveMqttBoxStatusData::set_vol(float value) {
  
  vol_ = value;
  // @@protoc_insertion_point(field_set:io.nonda.onedata.proto.contract.CloudDriveMqttBoxStatusData.vol)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloudDriveMqttEventData::kFwFieldNumber;
const int CloudDriveMqttEventData::kAppFieldNumber;
const int CloudDriveMqttEventData::kLatFieldNumber;
const int CloudDriveMqttEventData::kLngFieldNumber;
const int CloudDriveMqttEventData::kAccFieldNumber;
const int CloudDriveMqttEventData::kVolFieldNumber;
const int CloudDriveMqttEventData::kTypeFieldNumber;
const int CloudDriveMqttEventData::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloudDriveMqttEventData::CloudDriveMqttEventData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CloudDriveMqttMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.nonda.onedata.proto.contract.CloudDriveMqttEventData)
}
CloudDriveMqttEventData::CloudDriveMqttEventData(const CloudDriveMqttEventData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fw_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fw().size() > 0) {
    fw_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fw_);
  }
  app_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.app().size() > 0) {
    app_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  ::memcpy(&lat_, &from.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:io.nonda.onedata.proto.contract.CloudDriveMqttEventData)
}

void CloudDriveMqttEventData::SharedCtor() {
  fw_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(type_));
  _cached_size_ = 0;
}

CloudDriveMqttEventData::~CloudDriveMqttEventData() {
  // @@protoc_insertion_point(destructor:io.nonda.onedata.proto.contract.CloudDriveMqttEventData)
  SharedDtor();
}

void CloudDriveMqttEventData::SharedDtor() {
  fw_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CloudDriveMqttEventData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloudDriveMqttEventData::descriptor() {
  protobuf_CloudDriveMqttMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CloudDriveMqttMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CloudDriveMqttEventData& CloudDriveMqttEventData::default_instance() {
  protobuf_CloudDriveMqttMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

CloudDriveMqttEventData* CloudDriveMqttEventData::New(::google::protobuf::Arena* arena) const {
  CloudDriveMqttEventData* n = new CloudDriveMqttEventData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CloudDriveMqttEventData::Clear() {
// @@protoc_insertion_point(message_clear_start:io.nonda.onedata.proto.contract.CloudDriveMqttEventData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fw_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool CloudDriveMqttEventData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:io.nonda.onedata.proto.contract.CloudDriveMqttEventData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string fw = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fw()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fw().data(), static_cast<int>(this->fw().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "io.nonda.onedata.proto.contract.CloudDriveMqttEventData.fw"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string app = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->app().data(), static_cast<int>(this->app().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "io.nonda.onedata.proto.contract.CloudDriveMqttEventData.app"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lng = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lng_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float acc = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vol = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string content = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), static_cast<int>(this->content().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "io.nonda.onedata.proto.contract.CloudDriveMqttEventData.content"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:io.nonda.onedata.proto.contract.CloudDriveMqttEventData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:io.nonda.onedata.proto.contract.CloudDriveMqttEventData)
  return false;
#undef DO_
}

void CloudDriveMqttEventData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:io.nonda.onedata.proto.contract.CloudDriveMqttEventData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fw = 1;
  if (this->fw().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fw().data(), static_cast<int>(this->fw().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "io.nonda.onedata.proto.contract.CloudDriveMqttEventData.fw");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fw(), output);
  }

  // string app = 2;
  if (this->app().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app().data(), static_cast<int>(this->app().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "io.nonda.onedata.proto.contract.CloudDriveMqttEventData.app");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->app(), output);
  }

  // double lat = 3;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lat(), output);
  }

  // double lng = 4;
  if (this->lng() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->lng(), output);
  }

  // float acc = 5;
  if (this->acc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->acc(), output);
  }

  // float vol = 6;
  if (this->vol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->vol(), output);
  }

  // int32 type = 7;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->type(), output);
  }

  // string content = 8;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "io.nonda.onedata.proto.contract.CloudDriveMqttEventData.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->content(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:io.nonda.onedata.proto.contract.CloudDriveMqttEventData)
}

::google::protobuf::uint8* CloudDriveMqttEventData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:io.nonda.onedata.proto.contract.CloudDriveMqttEventData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fw = 1;
  if (this->fw().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fw().data(), static_cast<int>(this->fw().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "io.nonda.onedata.proto.contract.CloudDriveMqttEventData.fw");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fw(), target);
  }

  // string app = 2;
  if (this->app().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app().data(), static_cast<int>(this->app().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "io.nonda.onedata.proto.contract.CloudDriveMqttEventData.app");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->app(), target);
  }

  // double lat = 3;
  if (this->lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lat(), target);
  }

  // double lng = 4;
  if (this->lng() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->lng(), target);
  }

  // float acc = 5;
  if (this->acc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->acc(), target);
  }

  // float vol = 6;
  if (this->vol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->vol(), target);
  }

  // int32 type = 7;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->type(), target);
  }

  // string content = 8;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "io.nonda.onedata.proto.contract.CloudDriveMqttEventData.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->content(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.nonda.onedata.proto.contract.CloudDriveMqttEventData)
  return target;
}

size_t CloudDriveMqttEventData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.nonda.onedata.proto.contract.CloudDriveMqttEventData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string fw = 1;
  if (this->fw().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fw());
  }

  // string app = 2;
  if (this->app().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->app());
  }

  // string content = 8;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  // double lat = 3;
  if (this->lat() != 0) {
    total_size += 1 + 8;
  }

  // double lng = 4;
  if (this->lng() != 0) {
    total_size += 1 + 8;
  }

  // float acc = 5;
  if (this->acc() != 0) {
    total_size += 1 + 4;
  }

  // float vol = 6;
  if (this->vol() != 0) {
    total_size += 1 + 4;
  }

  // int32 type = 7;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloudDriveMqttEventData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttEventData)
  GOOGLE_DCHECK_NE(&from, this);
  const CloudDriveMqttEventData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CloudDriveMqttEventData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.nonda.onedata.proto.contract.CloudDriveMqttEventData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.nonda.onedata.proto.contract.CloudDriveMqttEventData)
    MergeFrom(*source);
  }
}

void CloudDriveMqttEventData::MergeFrom(const CloudDriveMqttEventData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttEventData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fw().size() > 0) {

    fw_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fw_);
  }
  if (from.app().size() > 0) {

    app_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.lat() != 0) {
    set_lat(from.lat());
  }
  if (from.lng() != 0) {
    set_lng(from.lng());
  }
  if (from.acc() != 0) {
    set_acc(from.acc());
  }
  if (from.vol() != 0) {
    set_vol(from.vol());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void CloudDriveMqttEventData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttEventData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudDriveMqttEventData::CopyFrom(const CloudDriveMqttEventData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttEventData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudDriveMqttEventData::IsInitialized() const {
  return true;
}

void CloudDriveMqttEventData::Swap(CloudDriveMqttEventData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloudDriveMqttEventData::InternalSwap(CloudDriveMqttEventData* other) {
  using std::swap;
  fw_.Swap(&other->fw_);
  app_.Swap(&other->app_);
  content_.Swap(&other->content_);
  swap(lat_, other->lat_);
  swap(lng_, other->lng_);
  swap(acc_, other->acc_);
  swap(vol_, other->vol_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloudDriveMqttEventData::GetMetadata() const {
  protobuf_CloudDriveMqttMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CloudDriveMqttMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CloudDriveMqttEventData

// string fw = 1;
void CloudDriveMqttEventData::clear_fw() {
  fw_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CloudDriveMqttEventData::fw() const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttEventData.fw)
  return fw_.GetNoArena();
}
void CloudDriveMqttEventData::set_fw(const ::std::string& value) {
  
  fw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:io.nonda.onedata.proto.contract.CloudDriveMqttEventData.fw)
}
#if LANG_CXX11
void CloudDriveMqttEventData::set_fw(::std::string&& value) {
  
  fw_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.nonda.onedata.proto.contract.CloudDriveMqttEventData.fw)
}
#endif
void CloudDriveMqttEventData::set_fw(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.nonda.onedata.proto.contract.CloudDriveMqttEventData.fw)
}
void CloudDriveMqttEventData::set_fw(const char* value, size_t size) {
  
  fw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.nonda.onedata.proto.contract.CloudDriveMqttEventData.fw)
}
::std::string* CloudDriveMqttEventData::mutable_fw() {
  
  // @@protoc_insertion_point(field_mutable:io.nonda.onedata.proto.contract.CloudDriveMqttEventData.fw)
  return fw_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CloudDriveMqttEventData::release_fw() {
  // @@protoc_insertion_point(field_release:io.nonda.onedata.proto.contract.CloudDriveMqttEventData.fw)
  
  return fw_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CloudDriveMqttEventData::set_allocated_fw(::std::string* fw) {
  if (fw != NULL) {
    
  } else {
    
  }
  fw_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fw);
  // @@protoc_insertion_point(field_set_allocated:io.nonda.onedata.proto.contract.CloudDriveMqttEventData.fw)
}

// string app = 2;
void CloudDriveMqttEventData::clear_app() {
  app_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CloudDriveMqttEventData::app() const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttEventData.app)
  return app_.GetNoArena();
}
void CloudDriveMqttEventData::set_app(const ::std::string& value) {
  
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:io.nonda.onedata.proto.contract.CloudDriveMqttEventData.app)
}
#if LANG_CXX11
void CloudDriveMqttEventData::set_app(::std::string&& value) {
  
  app_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.nonda.onedata.proto.contract.CloudDriveMqttEventData.app)
}
#endif
void CloudDriveMqttEventData::set_app(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.nonda.onedata.proto.contract.CloudDriveMqttEventData.app)
}
void CloudDriveMqttEventData::set_app(const char* value, size_t size) {
  
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.nonda.onedata.proto.contract.CloudDriveMqttEventData.app)
}
::std::string* CloudDriveMqttEventData::mutable_app() {
  
  // @@protoc_insertion_point(field_mutable:io.nonda.onedata.proto.contract.CloudDriveMqttEventData.app)
  return app_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CloudDriveMqttEventData::release_app() {
  // @@protoc_insertion_point(field_release:io.nonda.onedata.proto.contract.CloudDriveMqttEventData.app)
  
  return app_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CloudDriveMqttEventData::set_allocated_app(::std::string* app) {
  if (app != NULL) {
    
  } else {
    
  }
  app_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app);
  // @@protoc_insertion_point(field_set_allocated:io.nonda.onedata.proto.contract.CloudDriveMqttEventData.app)
}

// double lat = 3;
void CloudDriveMqttEventData::clear_lat() {
  lat_ = 0;
}
double CloudDriveMqttEventData::lat() const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttEventData.lat)
  return lat_;
}
void CloudDriveMqttEventData::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:io.nonda.onedata.proto.contract.CloudDriveMqttEventData.lat)
}

// double lng = 4;
void CloudDriveMqttEventData::clear_lng() {
  lng_ = 0;
}
double CloudDriveMqttEventData::lng() const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttEventData.lng)
  return lng_;
}
void CloudDriveMqttEventData::set_lng(double value) {
  
  lng_ = value;
  // @@protoc_insertion_point(field_set:io.nonda.onedata.proto.contract.CloudDriveMqttEventData.lng)
}

// float acc = 5;
void CloudDriveMqttEventData::clear_acc() {
  acc_ = 0;
}
float CloudDriveMqttEventData::acc() const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttEventData.acc)
  return acc_;
}
void CloudDriveMqttEventData::set_acc(float value) {
  
  acc_ = value;
  // @@protoc_insertion_point(field_set:io.nonda.onedata.proto.contract.CloudDriveMqttEventData.acc)
}

// float vol = 6;
void CloudDriveMqttEventData::clear_vol() {
  vol_ = 0;
}
float CloudDriveMqttEventData::vol() const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttEventData.vol)
  return vol_;
}
void CloudDriveMqttEventData::set_vol(float value) {
  
  vol_ = value;
  // @@protoc_insertion_point(field_set:io.nonda.onedata.proto.contract.CloudDriveMqttEventData.vol)
}

// int32 type = 7;
void CloudDriveMqttEventData::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 CloudDriveMqttEventData::type() const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttEventData.type)
  return type_;
}
void CloudDriveMqttEventData::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:io.nonda.onedata.proto.contract.CloudDriveMqttEventData.type)
}

// string content = 8;
void CloudDriveMqttEventData::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CloudDriveMqttEventData::content() const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttEventData.content)
  return content_.GetNoArena();
}
void CloudDriveMqttEventData::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:io.nonda.onedata.proto.contract.CloudDriveMqttEventData.content)
}
#if LANG_CXX11
void CloudDriveMqttEventData::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.nonda.onedata.proto.contract.CloudDriveMqttEventData.content)
}
#endif
void CloudDriveMqttEventData::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.nonda.onedata.proto.contract.CloudDriveMqttEventData.content)
}
void CloudDriveMqttEventData::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.nonda.onedata.proto.contract.CloudDriveMqttEventData.content)
}
::std::string* CloudDriveMqttEventData::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:io.nonda.onedata.proto.contract.CloudDriveMqttEventData.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CloudDriveMqttEventData::release_content() {
  // @@protoc_insertion_point(field_release:io.nonda.onedata.proto.contract.CloudDriveMqttEventData.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CloudDriveMqttEventData::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:io.nonda.onedata.proto.contract.CloudDriveMqttEventData.content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloudDriveMqttGpsData::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloudDriveMqttGpsData::CloudDriveMqttGpsData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CloudDriveMqttMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.nonda.onedata.proto.contract.CloudDriveMqttGpsData)
}
CloudDriveMqttGpsData::CloudDriveMqttGpsData(const CloudDriveMqttGpsData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      items_(from.items_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.nonda.onedata.proto.contract.CloudDriveMqttGpsData)
}

void CloudDriveMqttGpsData::SharedCtor() {
  _cached_size_ = 0;
}

CloudDriveMqttGpsData::~CloudDriveMqttGpsData() {
  // @@protoc_insertion_point(destructor:io.nonda.onedata.proto.contract.CloudDriveMqttGpsData)
  SharedDtor();
}

void CloudDriveMqttGpsData::SharedDtor() {
}

void CloudDriveMqttGpsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloudDriveMqttGpsData::descriptor() {
  protobuf_CloudDriveMqttMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CloudDriveMqttMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CloudDriveMqttGpsData& CloudDriveMqttGpsData::default_instance() {
  protobuf_CloudDriveMqttMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

CloudDriveMqttGpsData* CloudDriveMqttGpsData::New(::google::protobuf::Arena* arena) const {
  CloudDriveMqttGpsData* n = new CloudDriveMqttGpsData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CloudDriveMqttGpsData::Clear() {
// @@protoc_insertion_point(message_clear_start:io.nonda.onedata.proto.contract.CloudDriveMqttGpsData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear();
}

bool CloudDriveMqttGpsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:io.nonda.onedata.proto.contract.CloudDriveMqttGpsData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .io.nonda.onedata.proto.contract.CloudDriveMqttGpsDataItem items = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:io.nonda.onedata.proto.contract.CloudDriveMqttGpsData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:io.nonda.onedata.proto.contract.CloudDriveMqttGpsData)
  return false;
#undef DO_
}

void CloudDriveMqttGpsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:io.nonda.onedata.proto.contract.CloudDriveMqttGpsData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.nonda.onedata.proto.contract.CloudDriveMqttGpsDataItem items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:io.nonda.onedata.proto.contract.CloudDriveMqttGpsData)
}

::google::protobuf::uint8* CloudDriveMqttGpsData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:io.nonda.onedata.proto.contract.CloudDriveMqttGpsData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.nonda.onedata.proto.contract.CloudDriveMqttGpsDataItem items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->items(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.nonda.onedata.proto.contract.CloudDriveMqttGpsData)
  return target;
}

size_t CloudDriveMqttGpsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.nonda.onedata.proto.contract.CloudDriveMqttGpsData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .io.nonda.onedata.proto.contract.CloudDriveMqttGpsDataItem items = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloudDriveMqttGpsData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttGpsData)
  GOOGLE_DCHECK_NE(&from, this);
  const CloudDriveMqttGpsData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CloudDriveMqttGpsData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.nonda.onedata.proto.contract.CloudDriveMqttGpsData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.nonda.onedata.proto.contract.CloudDriveMqttGpsData)
    MergeFrom(*source);
  }
}

void CloudDriveMqttGpsData::MergeFrom(const CloudDriveMqttGpsData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttGpsData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void CloudDriveMqttGpsData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttGpsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudDriveMqttGpsData::CopyFrom(const CloudDriveMqttGpsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttGpsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudDriveMqttGpsData::IsInitialized() const {
  return true;
}

void CloudDriveMqttGpsData::Swap(CloudDriveMqttGpsData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloudDriveMqttGpsData::InternalSwap(CloudDriveMqttGpsData* other) {
  using std::swap;
  items_.InternalSwap(&other->items_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloudDriveMqttGpsData::GetMetadata() const {
  protobuf_CloudDriveMqttMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CloudDriveMqttMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CloudDriveMqttGpsData

// repeated .io.nonda.onedata.proto.contract.CloudDriveMqttGpsDataItem items = 1;
int CloudDriveMqttGpsData::items_size() const {
  return items_.size();
}
void CloudDriveMqttGpsData::clear_items() {
  items_.Clear();
}
const ::io::nonda::onedata::proto::contract::CloudDriveMqttGpsDataItem& CloudDriveMqttGpsData::items(int index) const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttGpsData.items)
  return items_.Get(index);
}
::io::nonda::onedata::proto::contract::CloudDriveMqttGpsDataItem* CloudDriveMqttGpsData::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:io.nonda.onedata.proto.contract.CloudDriveMqttGpsData.items)
  return items_.Mutable(index);
}
::io::nonda::onedata::proto::contract::CloudDriveMqttGpsDataItem* CloudDriveMqttGpsData::add_items() {
  // @@protoc_insertion_point(field_add:io.nonda.onedata.proto.contract.CloudDriveMqttGpsData.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::io::nonda::onedata::proto::contract::CloudDriveMqttGpsDataItem >*
CloudDriveMqttGpsData::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:io.nonda.onedata.proto.contract.CloudDriveMqttGpsData.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::io::nonda::onedata::proto::contract::CloudDriveMqttGpsDataItem >&
CloudDriveMqttGpsData::items() const {
  // @@protoc_insertion_point(field_list:io.nonda.onedata.proto.contract.CloudDriveMqttGpsData.items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloudDriveMqttGpsDataItem::kTimeFieldNumber;
const int CloudDriveMqttGpsDataItem::kLatFieldNumber;
const int CloudDriveMqttGpsDataItem::kLngFieldNumber;
const int CloudDriveMqttGpsDataItem::kSpdFieldNumber;
const int CloudDriveMqttGpsDataItem::kAccFieldNumber;
const int CloudDriveMqttGpsDataItem::kBrgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloudDriveMqttGpsDataItem::CloudDriveMqttGpsDataItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CloudDriveMqttMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.nonda.onedata.proto.contract.CloudDriveMqttGpsDataItem)
}
CloudDriveMqttGpsDataItem::CloudDriveMqttGpsDataItem(const CloudDriveMqttGpsDataItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&brg_) -
    reinterpret_cast<char*>(&time_)) + sizeof(brg_));
  // @@protoc_insertion_point(copy_constructor:io.nonda.onedata.proto.contract.CloudDriveMqttGpsDataItem)
}

void CloudDriveMqttGpsDataItem::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brg_) -
      reinterpret_cast<char*>(&time_)) + sizeof(brg_));
  _cached_size_ = 0;
}

CloudDriveMqttGpsDataItem::~CloudDriveMqttGpsDataItem() {
  // @@protoc_insertion_point(destructor:io.nonda.onedata.proto.contract.CloudDriveMqttGpsDataItem)
  SharedDtor();
}

void CloudDriveMqttGpsDataItem::SharedDtor() {
}

void CloudDriveMqttGpsDataItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloudDriveMqttGpsDataItem::descriptor() {
  protobuf_CloudDriveMqttMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CloudDriveMqttMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CloudDriveMqttGpsDataItem& CloudDriveMqttGpsDataItem::default_instance() {
  protobuf_CloudDriveMqttMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

CloudDriveMqttGpsDataItem* CloudDriveMqttGpsDataItem::New(::google::protobuf::Arena* arena) const {
  CloudDriveMqttGpsDataItem* n = new CloudDriveMqttGpsDataItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CloudDriveMqttGpsDataItem::Clear() {
// @@protoc_insertion_point(message_clear_start:io.nonda.onedata.proto.contract.CloudDriveMqttGpsDataItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brg_) -
      reinterpret_cast<char*>(&time_)) + sizeof(brg_));
  _internal_metadata_.Clear();
}

bool CloudDriveMqttGpsDataItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:io.nonda.onedata.proto.contract.CloudDriveMqttGpsDataItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lng = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lng_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float spd = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float acc = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float brg = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &brg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:io.nonda.onedata.proto.contract.CloudDriveMqttGpsDataItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:io.nonda.onedata.proto.contract.CloudDriveMqttGpsDataItem)
  return false;
#undef DO_
}

void CloudDriveMqttGpsDataItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:io.nonda.onedata.proto.contract.CloudDriveMqttGpsDataItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // double lat = 2;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lat(), output);
  }

  // double lng = 3;
  if (this->lng() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lng(), output);
  }

  // float spd = 4;
  if (this->spd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->spd(), output);
  }

  // float acc = 5;
  if (this->acc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->acc(), output);
  }

  // float brg = 6;
  if (this->brg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->brg(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:io.nonda.onedata.proto.contract.CloudDriveMqttGpsDataItem)
}

::google::protobuf::uint8* CloudDriveMqttGpsDataItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:io.nonda.onedata.proto.contract.CloudDriveMqttGpsDataItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // double lat = 2;
  if (this->lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lat(), target);
  }

  // double lng = 3;
  if (this->lng() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lng(), target);
  }

  // float spd = 4;
  if (this->spd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->spd(), target);
  }

  // float acc = 5;
  if (this->acc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->acc(), target);
  }

  // float brg = 6;
  if (this->brg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->brg(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.nonda.onedata.proto.contract.CloudDriveMqttGpsDataItem)
  return target;
}

size_t CloudDriveMqttGpsDataItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.nonda.onedata.proto.contract.CloudDriveMqttGpsDataItem)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  // double lat = 2;
  if (this->lat() != 0) {
    total_size += 1 + 8;
  }

  // double lng = 3;
  if (this->lng() != 0) {
    total_size += 1 + 8;
  }

  // float spd = 4;
  if (this->spd() != 0) {
    total_size += 1 + 4;
  }

  // float acc = 5;
  if (this->acc() != 0) {
    total_size += 1 + 4;
  }

  // float brg = 6;
  if (this->brg() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloudDriveMqttGpsDataItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttGpsDataItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CloudDriveMqttGpsDataItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CloudDriveMqttGpsDataItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.nonda.onedata.proto.contract.CloudDriveMqttGpsDataItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.nonda.onedata.proto.contract.CloudDriveMqttGpsDataItem)
    MergeFrom(*source);
  }
}

void CloudDriveMqttGpsDataItem::MergeFrom(const CloudDriveMqttGpsDataItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttGpsDataItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.lat() != 0) {
    set_lat(from.lat());
  }
  if (from.lng() != 0) {
    set_lng(from.lng());
  }
  if (from.spd() != 0) {
    set_spd(from.spd());
  }
  if (from.acc() != 0) {
    set_acc(from.acc());
  }
  if (from.brg() != 0) {
    set_brg(from.brg());
  }
}

void CloudDriveMqttGpsDataItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttGpsDataItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudDriveMqttGpsDataItem::CopyFrom(const CloudDriveMqttGpsDataItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttGpsDataItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudDriveMqttGpsDataItem::IsInitialized() const {
  return true;
}

void CloudDriveMqttGpsDataItem::Swap(CloudDriveMqttGpsDataItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloudDriveMqttGpsDataItem::InternalSwap(CloudDriveMqttGpsDataItem* other) {
  using std::swap;
  swap(time_, other->time_);
  swap(lat_, other->lat_);
  swap(lng_, other->lng_);
  swap(spd_, other->spd_);
  swap(acc_, other->acc_);
  swap(brg_, other->brg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloudDriveMqttGpsDataItem::GetMetadata() const {
  protobuf_CloudDriveMqttMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CloudDriveMqttMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CloudDriveMqttGpsDataItem

// int64 time = 1;
void CloudDriveMqttGpsDataItem::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 CloudDriveMqttGpsDataItem::time() const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttGpsDataItem.time)
  return time_;
}
void CloudDriveMqttGpsDataItem::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:io.nonda.onedata.proto.contract.CloudDriveMqttGpsDataItem.time)
}

// double lat = 2;
void CloudDriveMqttGpsDataItem::clear_lat() {
  lat_ = 0;
}
double CloudDriveMqttGpsDataItem::lat() const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttGpsDataItem.lat)
  return lat_;
}
void CloudDriveMqttGpsDataItem::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:io.nonda.onedata.proto.contract.CloudDriveMqttGpsDataItem.lat)
}

// double lng = 3;
void CloudDriveMqttGpsDataItem::clear_lng() {
  lng_ = 0;
}
double CloudDriveMqttGpsDataItem::lng() const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttGpsDataItem.lng)
  return lng_;
}
void CloudDriveMqttGpsDataItem::set_lng(double value) {
  
  lng_ = value;
  // @@protoc_insertion_point(field_set:io.nonda.onedata.proto.contract.CloudDriveMqttGpsDataItem.lng)
}

// float spd = 4;
void CloudDriveMqttGpsDataItem::clear_spd() {
  spd_ = 0;
}
float CloudDriveMqttGpsDataItem::spd() const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttGpsDataItem.spd)
  return spd_;
}
void CloudDriveMqttGpsDataItem::set_spd(float value) {
  
  spd_ = value;
  // @@protoc_insertion_point(field_set:io.nonda.onedata.proto.contract.CloudDriveMqttGpsDataItem.spd)
}

// float acc = 5;
void CloudDriveMqttGpsDataItem::clear_acc() {
  acc_ = 0;
}
float CloudDriveMqttGpsDataItem::acc() const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttGpsDataItem.acc)
  return acc_;
}
void CloudDriveMqttGpsDataItem::set_acc(float value) {
  
  acc_ = value;
  // @@protoc_insertion_point(field_set:io.nonda.onedata.proto.contract.CloudDriveMqttGpsDataItem.acc)
}

// float brg = 6;
void CloudDriveMqttGpsDataItem::clear_brg() {
  brg_ = 0;
}
float CloudDriveMqttGpsDataItem::brg() const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttGpsDataItem.brg)
  return brg_;
}
void CloudDriveMqttGpsDataItem::set_brg(float value) {
  
  brg_ = value;
  // @@protoc_insertion_point(field_set:io.nonda.onedata.proto.contract.CloudDriveMqttGpsDataItem.brg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloudDriveMqttGSensorData::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloudDriveMqttGSensorData::CloudDriveMqttGSensorData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CloudDriveMqttMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorData)
}
CloudDriveMqttGSensorData::CloudDriveMqttGSensorData(const CloudDriveMqttGSensorData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      items_(from.items_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorData)
}

void CloudDriveMqttGSensorData::SharedCtor() {
  _cached_size_ = 0;
}

CloudDriveMqttGSensorData::~CloudDriveMqttGSensorData() {
  // @@protoc_insertion_point(destructor:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorData)
  SharedDtor();
}

void CloudDriveMqttGSensorData::SharedDtor() {
}

void CloudDriveMqttGSensorData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloudDriveMqttGSensorData::descriptor() {
  protobuf_CloudDriveMqttMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CloudDriveMqttMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CloudDriveMqttGSensorData& CloudDriveMqttGSensorData::default_instance() {
  protobuf_CloudDriveMqttMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

CloudDriveMqttGSensorData* CloudDriveMqttGSensorData::New(::google::protobuf::Arena* arena) const {
  CloudDriveMqttGSensorData* n = new CloudDriveMqttGSensorData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CloudDriveMqttGSensorData::Clear() {
// @@protoc_insertion_point(message_clear_start:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear();
}

bool CloudDriveMqttGSensorData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .io.nonda.onedata.proto.contract.CloudDriveMqttGSensorDataItem items = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorData)
  return false;
#undef DO_
}

void CloudDriveMqttGSensorData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.nonda.onedata.proto.contract.CloudDriveMqttGSensorDataItem items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorData)
}

::google::protobuf::uint8* CloudDriveMqttGSensorData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.nonda.onedata.proto.contract.CloudDriveMqttGSensorDataItem items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->items(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorData)
  return target;
}

size_t CloudDriveMqttGSensorData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .io.nonda.onedata.proto.contract.CloudDriveMqttGSensorDataItem items = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloudDriveMqttGSensorData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorData)
  GOOGLE_DCHECK_NE(&from, this);
  const CloudDriveMqttGSensorData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CloudDriveMqttGSensorData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorData)
    MergeFrom(*source);
  }
}

void CloudDriveMqttGSensorData::MergeFrom(const CloudDriveMqttGSensorData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void CloudDriveMqttGSensorData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudDriveMqttGSensorData::CopyFrom(const CloudDriveMqttGSensorData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudDriveMqttGSensorData::IsInitialized() const {
  return true;
}

void CloudDriveMqttGSensorData::Swap(CloudDriveMqttGSensorData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloudDriveMqttGSensorData::InternalSwap(CloudDriveMqttGSensorData* other) {
  using std::swap;
  items_.InternalSwap(&other->items_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloudDriveMqttGSensorData::GetMetadata() const {
  protobuf_CloudDriveMqttMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CloudDriveMqttMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CloudDriveMqttGSensorData

// repeated .io.nonda.onedata.proto.contract.CloudDriveMqttGSensorDataItem items = 1;
int CloudDriveMqttGSensorData::items_size() const {
  return items_.size();
}
void CloudDriveMqttGSensorData::clear_items() {
  items_.Clear();
}
const ::io::nonda::onedata::proto::contract::CloudDriveMqttGSensorDataItem& CloudDriveMqttGSensorData::items(int index) const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorData.items)
  return items_.Get(index);
}
::io::nonda::onedata::proto::contract::CloudDriveMqttGSensorDataItem* CloudDriveMqttGSensorData::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorData.items)
  return items_.Mutable(index);
}
::io::nonda::onedata::proto::contract::CloudDriveMqttGSensorDataItem* CloudDriveMqttGSensorData::add_items() {
  // @@protoc_insertion_point(field_add:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorData.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::io::nonda::onedata::proto::contract::CloudDriveMqttGSensorDataItem >*
CloudDriveMqttGSensorData::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorData.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::io::nonda::onedata::proto::contract::CloudDriveMqttGSensorDataItem >&
CloudDriveMqttGSensorData::items() const {
  // @@protoc_insertion_point(field_list:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorData.items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloudDriveMqttGSensorDataItem::kTimeFieldNumber;
const int CloudDriveMqttGSensorDataItem::kXFieldNumber;
const int CloudDriveMqttGSensorDataItem::kYFieldNumber;
const int CloudDriveMqttGSensorDataItem::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloudDriveMqttGSensorDataItem::CloudDriveMqttGSensorDataItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CloudDriveMqttMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorDataItem)
}
CloudDriveMqttGSensorDataItem::CloudDriveMqttGSensorDataItem(const CloudDriveMqttGSensorDataItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&time_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorDataItem)
}

void CloudDriveMqttGSensorDataItem::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&time_)) + sizeof(z_));
  _cached_size_ = 0;
}

CloudDriveMqttGSensorDataItem::~CloudDriveMqttGSensorDataItem() {
  // @@protoc_insertion_point(destructor:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorDataItem)
  SharedDtor();
}

void CloudDriveMqttGSensorDataItem::SharedDtor() {
}

void CloudDriveMqttGSensorDataItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloudDriveMqttGSensorDataItem::descriptor() {
  protobuf_CloudDriveMqttMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CloudDriveMqttMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CloudDriveMqttGSensorDataItem& CloudDriveMqttGSensorDataItem::default_instance() {
  protobuf_CloudDriveMqttMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

CloudDriveMqttGSensorDataItem* CloudDriveMqttGSensorDataItem::New(::google::protobuf::Arena* arena) const {
  CloudDriveMqttGSensorDataItem* n = new CloudDriveMqttGSensorDataItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CloudDriveMqttGSensorDataItem::Clear() {
// @@protoc_insertion_point(message_clear_start:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorDataItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&time_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

bool CloudDriveMqttGSensorDataItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorDataItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorDataItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorDataItem)
  return false;
#undef DO_
}

void CloudDriveMqttGSensorDataItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorDataItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // float x = 2;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // float y = 3;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // float z = 4;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->z(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorDataItem)
}

::google::protobuf::uint8* CloudDriveMqttGSensorDataItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorDataItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // float x = 2;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }

  // float y = 3;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  // float z = 4;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->z(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorDataItem)
  return target;
}

size_t CloudDriveMqttGSensorDataItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorDataItem)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  // float x = 2;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 4;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloudDriveMqttGSensorDataItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorDataItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CloudDriveMqttGSensorDataItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CloudDriveMqttGSensorDataItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorDataItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorDataItem)
    MergeFrom(*source);
  }
}

void CloudDriveMqttGSensorDataItem::MergeFrom(const CloudDriveMqttGSensorDataItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorDataItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void CloudDriveMqttGSensorDataItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorDataItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudDriveMqttGSensorDataItem::CopyFrom(const CloudDriveMqttGSensorDataItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorDataItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudDriveMqttGSensorDataItem::IsInitialized() const {
  return true;
}

void CloudDriveMqttGSensorDataItem::Swap(CloudDriveMqttGSensorDataItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloudDriveMqttGSensorDataItem::InternalSwap(CloudDriveMqttGSensorDataItem* other) {
  using std::swap;
  swap(time_, other->time_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloudDriveMqttGSensorDataItem::GetMetadata() const {
  protobuf_CloudDriveMqttMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CloudDriveMqttMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CloudDriveMqttGSensorDataItem

// int64 time = 1;
void CloudDriveMqttGSensorDataItem::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 CloudDriveMqttGSensorDataItem::time() const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorDataItem.time)
  return time_;
}
void CloudDriveMqttGSensorDataItem::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorDataItem.time)
}

// float x = 2;
void CloudDriveMqttGSensorDataItem::clear_x() {
  x_ = 0;
}
float CloudDriveMqttGSensorDataItem::x() const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorDataItem.x)
  return x_;
}
void CloudDriveMqttGSensorDataItem::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorDataItem.x)
}

// float y = 3;
void CloudDriveMqttGSensorDataItem::clear_y() {
  y_ = 0;
}
float CloudDriveMqttGSensorDataItem::y() const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorDataItem.y)
  return y_;
}
void CloudDriveMqttGSensorDataItem::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorDataItem.y)
}

// float z = 4;
void CloudDriveMqttGSensorDataItem::clear_z() {
  z_ = 0;
}
float CloudDriveMqttGSensorDataItem::z() const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorDataItem.z)
  return z_;
}
void CloudDriveMqttGSensorDataItem::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:io.nonda.onedata.proto.contract.CloudDriveMqttGSensorDataItem.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloudDriveMqttGyroData::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloudDriveMqttGyroData::CloudDriveMqttGyroData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CloudDriveMqttMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.nonda.onedata.proto.contract.CloudDriveMqttGyroData)
}
CloudDriveMqttGyroData::CloudDriveMqttGyroData(const CloudDriveMqttGyroData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      items_(from.items_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.nonda.onedata.proto.contract.CloudDriveMqttGyroData)
}

void CloudDriveMqttGyroData::SharedCtor() {
  _cached_size_ = 0;
}

CloudDriveMqttGyroData::~CloudDriveMqttGyroData() {
  // @@protoc_insertion_point(destructor:io.nonda.onedata.proto.contract.CloudDriveMqttGyroData)
  SharedDtor();
}

void CloudDriveMqttGyroData::SharedDtor() {
}

void CloudDriveMqttGyroData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloudDriveMqttGyroData::descriptor() {
  protobuf_CloudDriveMqttMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CloudDriveMqttMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CloudDriveMqttGyroData& CloudDriveMqttGyroData::default_instance() {
  protobuf_CloudDriveMqttMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

CloudDriveMqttGyroData* CloudDriveMqttGyroData::New(::google::protobuf::Arena* arena) const {
  CloudDriveMqttGyroData* n = new CloudDriveMqttGyroData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CloudDriveMqttGyroData::Clear() {
// @@protoc_insertion_point(message_clear_start:io.nonda.onedata.proto.contract.CloudDriveMqttGyroData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear();
}

bool CloudDriveMqttGyroData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:io.nonda.onedata.proto.contract.CloudDriveMqttGyroData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .io.nonda.onedata.proto.contract.CloudDriveMqttGyroDataItem items = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:io.nonda.onedata.proto.contract.CloudDriveMqttGyroData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:io.nonda.onedata.proto.contract.CloudDriveMqttGyroData)
  return false;
#undef DO_
}

void CloudDriveMqttGyroData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:io.nonda.onedata.proto.contract.CloudDriveMqttGyroData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.nonda.onedata.proto.contract.CloudDriveMqttGyroDataItem items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:io.nonda.onedata.proto.contract.CloudDriveMqttGyroData)
}

::google::protobuf::uint8* CloudDriveMqttGyroData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:io.nonda.onedata.proto.contract.CloudDriveMqttGyroData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.nonda.onedata.proto.contract.CloudDriveMqttGyroDataItem items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->items(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.nonda.onedata.proto.contract.CloudDriveMqttGyroData)
  return target;
}

size_t CloudDriveMqttGyroData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.nonda.onedata.proto.contract.CloudDriveMqttGyroData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .io.nonda.onedata.proto.contract.CloudDriveMqttGyroDataItem items = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloudDriveMqttGyroData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttGyroData)
  GOOGLE_DCHECK_NE(&from, this);
  const CloudDriveMqttGyroData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CloudDriveMqttGyroData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.nonda.onedata.proto.contract.CloudDriveMqttGyroData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.nonda.onedata.proto.contract.CloudDriveMqttGyroData)
    MergeFrom(*source);
  }
}

void CloudDriveMqttGyroData::MergeFrom(const CloudDriveMqttGyroData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttGyroData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void CloudDriveMqttGyroData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttGyroData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudDriveMqttGyroData::CopyFrom(const CloudDriveMqttGyroData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttGyroData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudDriveMqttGyroData::IsInitialized() const {
  return true;
}

void CloudDriveMqttGyroData::Swap(CloudDriveMqttGyroData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloudDriveMqttGyroData::InternalSwap(CloudDriveMqttGyroData* other) {
  using std::swap;
  items_.InternalSwap(&other->items_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloudDriveMqttGyroData::GetMetadata() const {
  protobuf_CloudDriveMqttMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CloudDriveMqttMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CloudDriveMqttGyroData

// repeated .io.nonda.onedata.proto.contract.CloudDriveMqttGyroDataItem items = 1;
int CloudDriveMqttGyroData::items_size() const {
  return items_.size();
}
void CloudDriveMqttGyroData::clear_items() {
  items_.Clear();
}
const ::io::nonda::onedata::proto::contract::CloudDriveMqttGyroDataItem& CloudDriveMqttGyroData::items(int index) const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttGyroData.items)
  return items_.Get(index);
}
::io::nonda::onedata::proto::contract::CloudDriveMqttGyroDataItem* CloudDriveMqttGyroData::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:io.nonda.onedata.proto.contract.CloudDriveMqttGyroData.items)
  return items_.Mutable(index);
}
::io::nonda::onedata::proto::contract::CloudDriveMqttGyroDataItem* CloudDriveMqttGyroData::add_items() {
  // @@protoc_insertion_point(field_add:io.nonda.onedata.proto.contract.CloudDriveMqttGyroData.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::io::nonda::onedata::proto::contract::CloudDriveMqttGyroDataItem >*
CloudDriveMqttGyroData::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:io.nonda.onedata.proto.contract.CloudDriveMqttGyroData.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::io::nonda::onedata::proto::contract::CloudDriveMqttGyroDataItem >&
CloudDriveMqttGyroData::items() const {
  // @@protoc_insertion_point(field_list:io.nonda.onedata.proto.contract.CloudDriveMqttGyroData.items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloudDriveMqttGyroDataItem::kTimeFieldNumber;
const int CloudDriveMqttGyroDataItem::kXFieldNumber;
const int CloudDriveMqttGyroDataItem::kYFieldNumber;
const int CloudDriveMqttGyroDataItem::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloudDriveMqttGyroDataItem::CloudDriveMqttGyroDataItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CloudDriveMqttMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.nonda.onedata.proto.contract.CloudDriveMqttGyroDataItem)
}
CloudDriveMqttGyroDataItem::CloudDriveMqttGyroDataItem(const CloudDriveMqttGyroDataItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&time_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:io.nonda.onedata.proto.contract.CloudDriveMqttGyroDataItem)
}

void CloudDriveMqttGyroDataItem::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&time_)) + sizeof(z_));
  _cached_size_ = 0;
}

CloudDriveMqttGyroDataItem::~CloudDriveMqttGyroDataItem() {
  // @@protoc_insertion_point(destructor:io.nonda.onedata.proto.contract.CloudDriveMqttGyroDataItem)
  SharedDtor();
}

void CloudDriveMqttGyroDataItem::SharedDtor() {
}

void CloudDriveMqttGyroDataItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloudDriveMqttGyroDataItem::descriptor() {
  protobuf_CloudDriveMqttMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CloudDriveMqttMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CloudDriveMqttGyroDataItem& CloudDriveMqttGyroDataItem::default_instance() {
  protobuf_CloudDriveMqttMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

CloudDriveMqttGyroDataItem* CloudDriveMqttGyroDataItem::New(::google::protobuf::Arena* arena) const {
  CloudDriveMqttGyroDataItem* n = new CloudDriveMqttGyroDataItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CloudDriveMqttGyroDataItem::Clear() {
// @@protoc_insertion_point(message_clear_start:io.nonda.onedata.proto.contract.CloudDriveMqttGyroDataItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&time_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

bool CloudDriveMqttGyroDataItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:io.nonda.onedata.proto.contract.CloudDriveMqttGyroDataItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:io.nonda.onedata.proto.contract.CloudDriveMqttGyroDataItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:io.nonda.onedata.proto.contract.CloudDriveMqttGyroDataItem)
  return false;
#undef DO_
}

void CloudDriveMqttGyroDataItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:io.nonda.onedata.proto.contract.CloudDriveMqttGyroDataItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // float x = 2;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // float y = 3;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // float z = 4;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->z(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:io.nonda.onedata.proto.contract.CloudDriveMqttGyroDataItem)
}

::google::protobuf::uint8* CloudDriveMqttGyroDataItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:io.nonda.onedata.proto.contract.CloudDriveMqttGyroDataItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // float x = 2;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }

  // float y = 3;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  // float z = 4;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->z(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.nonda.onedata.proto.contract.CloudDriveMqttGyroDataItem)
  return target;
}

size_t CloudDriveMqttGyroDataItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.nonda.onedata.proto.contract.CloudDriveMqttGyroDataItem)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  // float x = 2;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 4;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloudDriveMqttGyroDataItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttGyroDataItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CloudDriveMqttGyroDataItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CloudDriveMqttGyroDataItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.nonda.onedata.proto.contract.CloudDriveMqttGyroDataItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.nonda.onedata.proto.contract.CloudDriveMqttGyroDataItem)
    MergeFrom(*source);
  }
}

void CloudDriveMqttGyroDataItem::MergeFrom(const CloudDriveMqttGyroDataItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttGyroDataItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void CloudDriveMqttGyroDataItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttGyroDataItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudDriveMqttGyroDataItem::CopyFrom(const CloudDriveMqttGyroDataItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttGyroDataItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudDriveMqttGyroDataItem::IsInitialized() const {
  return true;
}

void CloudDriveMqttGyroDataItem::Swap(CloudDriveMqttGyroDataItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloudDriveMqttGyroDataItem::InternalSwap(CloudDriveMqttGyroDataItem* other) {
  using std::swap;
  swap(time_, other->time_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloudDriveMqttGyroDataItem::GetMetadata() const {
  protobuf_CloudDriveMqttMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CloudDriveMqttMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CloudDriveMqttGyroDataItem

// int64 time = 1;
void CloudDriveMqttGyroDataItem::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 CloudDriveMqttGyroDataItem::time() const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttGyroDataItem.time)
  return time_;
}
void CloudDriveMqttGyroDataItem::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:io.nonda.onedata.proto.contract.CloudDriveMqttGyroDataItem.time)
}

// float x = 2;
void CloudDriveMqttGyroDataItem::clear_x() {
  x_ = 0;
}
float CloudDriveMqttGyroDataItem::x() const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttGyroDataItem.x)
  return x_;
}
void CloudDriveMqttGyroDataItem::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:io.nonda.onedata.proto.contract.CloudDriveMqttGyroDataItem.x)
}

// float y = 3;
void CloudDriveMqttGyroDataItem::clear_y() {
  y_ = 0;
}
float CloudDriveMqttGyroDataItem::y() const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttGyroDataItem.y)
  return y_;
}
void CloudDriveMqttGyroDataItem::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:io.nonda.onedata.proto.contract.CloudDriveMqttGyroDataItem.y)
}

// float z = 4;
void CloudDriveMqttGyroDataItem::clear_z() {
  z_ = 0;
}
float CloudDriveMqttGyroDataItem::z() const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttGyroDataItem.z)
  return z_;
}
void CloudDriveMqttGyroDataItem::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:io.nonda.onedata.proto.contract.CloudDriveMqttGyroDataItem.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloudDriveMqttFreqData::kCollectFreqFieldNumber;
const int CloudDriveMqttFreqData::kReportFreqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloudDriveMqttFreqData::CloudDriveMqttFreqData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CloudDriveMqttMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.nonda.onedata.proto.contract.CloudDriveMqttFreqData)
}
CloudDriveMqttFreqData::CloudDriveMqttFreqData(const CloudDriveMqttFreqData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&collectfreq_, &from.collectfreq_,
    static_cast<size_t>(reinterpret_cast<char*>(&reportfreq_) -
    reinterpret_cast<char*>(&collectfreq_)) + sizeof(reportfreq_));
  // @@protoc_insertion_point(copy_constructor:io.nonda.onedata.proto.contract.CloudDriveMqttFreqData)
}

void CloudDriveMqttFreqData::SharedCtor() {
  ::memset(&collectfreq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reportfreq_) -
      reinterpret_cast<char*>(&collectfreq_)) + sizeof(reportfreq_));
  _cached_size_ = 0;
}

CloudDriveMqttFreqData::~CloudDriveMqttFreqData() {
  // @@protoc_insertion_point(destructor:io.nonda.onedata.proto.contract.CloudDriveMqttFreqData)
  SharedDtor();
}

void CloudDriveMqttFreqData::SharedDtor() {
}

void CloudDriveMqttFreqData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloudDriveMqttFreqData::descriptor() {
  protobuf_CloudDriveMqttMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CloudDriveMqttMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CloudDriveMqttFreqData& CloudDriveMqttFreqData::default_instance() {
  protobuf_CloudDriveMqttMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

CloudDriveMqttFreqData* CloudDriveMqttFreqData::New(::google::protobuf::Arena* arena) const {
  CloudDriveMqttFreqData* n = new CloudDriveMqttFreqData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CloudDriveMqttFreqData::Clear() {
// @@protoc_insertion_point(message_clear_start:io.nonda.onedata.proto.contract.CloudDriveMqttFreqData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&collectfreq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reportfreq_) -
      reinterpret_cast<char*>(&collectfreq_)) + sizeof(reportfreq_));
  _internal_metadata_.Clear();
}

bool CloudDriveMqttFreqData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:io.nonda.onedata.proto.contract.CloudDriveMqttFreqData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 collectFreq = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &collectfreq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 reportFreq = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reportfreq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:io.nonda.onedata.proto.contract.CloudDriveMqttFreqData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:io.nonda.onedata.proto.contract.CloudDriveMqttFreqData)
  return false;
#undef DO_
}

void CloudDriveMqttFreqData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:io.nonda.onedata.proto.contract.CloudDriveMqttFreqData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 collectFreq = 1;
  if (this->collectfreq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->collectfreq(), output);
  }

  // int32 reportFreq = 2;
  if (this->reportfreq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reportfreq(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:io.nonda.onedata.proto.contract.CloudDriveMqttFreqData)
}

::google::protobuf::uint8* CloudDriveMqttFreqData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:io.nonda.onedata.proto.contract.CloudDriveMqttFreqData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 collectFreq = 1;
  if (this->collectfreq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->collectfreq(), target);
  }

  // int32 reportFreq = 2;
  if (this->reportfreq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reportfreq(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.nonda.onedata.proto.contract.CloudDriveMqttFreqData)
  return target;
}

size_t CloudDriveMqttFreqData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.nonda.onedata.proto.contract.CloudDriveMqttFreqData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 collectFreq = 1;
  if (this->collectfreq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->collectfreq());
  }

  // int32 reportFreq = 2;
  if (this->reportfreq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reportfreq());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloudDriveMqttFreqData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttFreqData)
  GOOGLE_DCHECK_NE(&from, this);
  const CloudDriveMqttFreqData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CloudDriveMqttFreqData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.nonda.onedata.proto.contract.CloudDriveMqttFreqData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.nonda.onedata.proto.contract.CloudDriveMqttFreqData)
    MergeFrom(*source);
  }
}

void CloudDriveMqttFreqData::MergeFrom(const CloudDriveMqttFreqData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttFreqData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.collectfreq() != 0) {
    set_collectfreq(from.collectfreq());
  }
  if (from.reportfreq() != 0) {
    set_reportfreq(from.reportfreq());
  }
}

void CloudDriveMqttFreqData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttFreqData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudDriveMqttFreqData::CopyFrom(const CloudDriveMqttFreqData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttFreqData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudDriveMqttFreqData::IsInitialized() const {
  return true;
}

void CloudDriveMqttFreqData::Swap(CloudDriveMqttFreqData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloudDriveMqttFreqData::InternalSwap(CloudDriveMqttFreqData* other) {
  using std::swap;
  swap(collectfreq_, other->collectfreq_);
  swap(reportfreq_, other->reportfreq_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloudDriveMqttFreqData::GetMetadata() const {
  protobuf_CloudDriveMqttMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CloudDriveMqttMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CloudDriveMqttFreqData

// int32 collectFreq = 1;
void CloudDriveMqttFreqData::clear_collectfreq() {
  collectfreq_ = 0;
}
::google::protobuf::int32 CloudDriveMqttFreqData::collectfreq() const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttFreqData.collectFreq)
  return collectfreq_;
}
void CloudDriveMqttFreqData::set_collectfreq(::google::protobuf::int32 value) {
  
  collectfreq_ = value;
  // @@protoc_insertion_point(field_set:io.nonda.onedata.proto.contract.CloudDriveMqttFreqData.collectFreq)
}

// int32 reportFreq = 2;
void CloudDriveMqttFreqData::clear_reportfreq() {
  reportfreq_ = 0;
}
::google::protobuf::int32 CloudDriveMqttFreqData::reportfreq() const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttFreqData.reportFreq)
  return reportfreq_;
}
void CloudDriveMqttFreqData::set_reportfreq(::google::protobuf::int32 value) {
  
  reportfreq_ = value;
  // @@protoc_insertion_point(field_set:io.nonda.onedata.proto.contract.CloudDriveMqttFreqData.reportFreq)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloudDriveMqttFaceData::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloudDriveMqttFaceData::CloudDriveMqttFaceData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CloudDriveMqttMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.nonda.onedata.proto.contract.CloudDriveMqttFaceData)
}
CloudDriveMqttFaceData::CloudDriveMqttFaceData(const CloudDriveMqttFaceData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      items_(from.items_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.nonda.onedata.proto.contract.CloudDriveMqttFaceData)
}

void CloudDriveMqttFaceData::SharedCtor() {
  _cached_size_ = 0;
}

CloudDriveMqttFaceData::~CloudDriveMqttFaceData() {
  // @@protoc_insertion_point(destructor:io.nonda.onedata.proto.contract.CloudDriveMqttFaceData)
  SharedDtor();
}

void CloudDriveMqttFaceData::SharedDtor() {
}

void CloudDriveMqttFaceData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloudDriveMqttFaceData::descriptor() {
  protobuf_CloudDriveMqttMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CloudDriveMqttMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CloudDriveMqttFaceData& CloudDriveMqttFaceData::default_instance() {
  protobuf_CloudDriveMqttMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

CloudDriveMqttFaceData* CloudDriveMqttFaceData::New(::google::protobuf::Arena* arena) const {
  CloudDriveMqttFaceData* n = new CloudDriveMqttFaceData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CloudDriveMqttFaceData::Clear() {
// @@protoc_insertion_point(message_clear_start:io.nonda.onedata.proto.contract.CloudDriveMqttFaceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear();
}

bool CloudDriveMqttFaceData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:io.nonda.onedata.proto.contract.CloudDriveMqttFaceData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .io.nonda.onedata.proto.contract.CloudDriveMqttFaceDataItem items = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:io.nonda.onedata.proto.contract.CloudDriveMqttFaceData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:io.nonda.onedata.proto.contract.CloudDriveMqttFaceData)
  return false;
#undef DO_
}

void CloudDriveMqttFaceData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:io.nonda.onedata.proto.contract.CloudDriveMqttFaceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.nonda.onedata.proto.contract.CloudDriveMqttFaceDataItem items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:io.nonda.onedata.proto.contract.CloudDriveMqttFaceData)
}

::google::protobuf::uint8* CloudDriveMqttFaceData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:io.nonda.onedata.proto.contract.CloudDriveMqttFaceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.nonda.onedata.proto.contract.CloudDriveMqttFaceDataItem items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->items(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.nonda.onedata.proto.contract.CloudDriveMqttFaceData)
  return target;
}

size_t CloudDriveMqttFaceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.nonda.onedata.proto.contract.CloudDriveMqttFaceData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .io.nonda.onedata.proto.contract.CloudDriveMqttFaceDataItem items = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloudDriveMqttFaceData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttFaceData)
  GOOGLE_DCHECK_NE(&from, this);
  const CloudDriveMqttFaceData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CloudDriveMqttFaceData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.nonda.onedata.proto.contract.CloudDriveMqttFaceData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.nonda.onedata.proto.contract.CloudDriveMqttFaceData)
    MergeFrom(*source);
  }
}

void CloudDriveMqttFaceData::MergeFrom(const CloudDriveMqttFaceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttFaceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void CloudDriveMqttFaceData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttFaceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudDriveMqttFaceData::CopyFrom(const CloudDriveMqttFaceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttFaceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudDriveMqttFaceData::IsInitialized() const {
  return true;
}

void CloudDriveMqttFaceData::Swap(CloudDriveMqttFaceData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloudDriveMqttFaceData::InternalSwap(CloudDriveMqttFaceData* other) {
  using std::swap;
  items_.InternalSwap(&other->items_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloudDriveMqttFaceData::GetMetadata() const {
  protobuf_CloudDriveMqttMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CloudDriveMqttMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CloudDriveMqttFaceData

// repeated .io.nonda.onedata.proto.contract.CloudDriveMqttFaceDataItem items = 1;
int CloudDriveMqttFaceData::items_size() const {
  return items_.size();
}
void CloudDriveMqttFaceData::clear_items() {
  items_.Clear();
}
const ::io::nonda::onedata::proto::contract::CloudDriveMqttFaceDataItem& CloudDriveMqttFaceData::items(int index) const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttFaceData.items)
  return items_.Get(index);
}
::io::nonda::onedata::proto::contract::CloudDriveMqttFaceDataItem* CloudDriveMqttFaceData::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:io.nonda.onedata.proto.contract.CloudDriveMqttFaceData.items)
  return items_.Mutable(index);
}
::io::nonda::onedata::proto::contract::CloudDriveMqttFaceDataItem* CloudDriveMqttFaceData::add_items() {
  // @@protoc_insertion_point(field_add:io.nonda.onedata.proto.contract.CloudDriveMqttFaceData.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::io::nonda::onedata::proto::contract::CloudDriveMqttFaceDataItem >*
CloudDriveMqttFaceData::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:io.nonda.onedata.proto.contract.CloudDriveMqttFaceData.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::io::nonda::onedata::proto::contract::CloudDriveMqttFaceDataItem >&
CloudDriveMqttFaceData::items() const {
  // @@protoc_insertion_point(field_list:io.nonda.onedata.proto.contract.CloudDriveMqttFaceData.items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloudDriveMqttFaceDataItem::kTimeFieldNumber;
const int CloudDriveMqttFaceDataItem::kFaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloudDriveMqttFaceDataItem::CloudDriveMqttFaceDataItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CloudDriveMqttMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.nonda.onedata.proto.contract.CloudDriveMqttFaceDataItem)
}
CloudDriveMqttFaceDataItem::CloudDriveMqttFaceDataItem(const CloudDriveMqttFaceDataItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&face_) -
    reinterpret_cast<char*>(&time_)) + sizeof(face_));
  // @@protoc_insertion_point(copy_constructor:io.nonda.onedata.proto.contract.CloudDriveMqttFaceDataItem)
}

void CloudDriveMqttFaceDataItem::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&face_) -
      reinterpret_cast<char*>(&time_)) + sizeof(face_));
  _cached_size_ = 0;
}

CloudDriveMqttFaceDataItem::~CloudDriveMqttFaceDataItem() {
  // @@protoc_insertion_point(destructor:io.nonda.onedata.proto.contract.CloudDriveMqttFaceDataItem)
  SharedDtor();
}

void CloudDriveMqttFaceDataItem::SharedDtor() {
}

void CloudDriveMqttFaceDataItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloudDriveMqttFaceDataItem::descriptor() {
  protobuf_CloudDriveMqttMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CloudDriveMqttMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CloudDriveMqttFaceDataItem& CloudDriveMqttFaceDataItem::default_instance() {
  protobuf_CloudDriveMqttMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

CloudDriveMqttFaceDataItem* CloudDriveMqttFaceDataItem::New(::google::protobuf::Arena* arena) const {
  CloudDriveMqttFaceDataItem* n = new CloudDriveMqttFaceDataItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CloudDriveMqttFaceDataItem::Clear() {
// @@protoc_insertion_point(message_clear_start:io.nonda.onedata.proto.contract.CloudDriveMqttFaceDataItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&face_) -
      reinterpret_cast<char*>(&time_)) + sizeof(face_));
  _internal_metadata_.Clear();
}

bool CloudDriveMqttFaceDataItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:io.nonda.onedata.proto.contract.CloudDriveMqttFaceDataItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 face = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &face_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:io.nonda.onedata.proto.contract.CloudDriveMqttFaceDataItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:io.nonda.onedata.proto.contract.CloudDriveMqttFaceDataItem)
  return false;
#undef DO_
}

void CloudDriveMqttFaceDataItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:io.nonda.onedata.proto.contract.CloudDriveMqttFaceDataItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // int32 face = 2;
  if (this->face() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->face(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:io.nonda.onedata.proto.contract.CloudDriveMqttFaceDataItem)
}

::google::protobuf::uint8* CloudDriveMqttFaceDataItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:io.nonda.onedata.proto.contract.CloudDriveMqttFaceDataItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // int32 face = 2;
  if (this->face() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->face(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.nonda.onedata.proto.contract.CloudDriveMqttFaceDataItem)
  return target;
}

size_t CloudDriveMqttFaceDataItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.nonda.onedata.proto.contract.CloudDriveMqttFaceDataItem)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  // int32 face = 2;
  if (this->face() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->face());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloudDriveMqttFaceDataItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttFaceDataItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CloudDriveMqttFaceDataItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CloudDriveMqttFaceDataItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.nonda.onedata.proto.contract.CloudDriveMqttFaceDataItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.nonda.onedata.proto.contract.CloudDriveMqttFaceDataItem)
    MergeFrom(*source);
  }
}

void CloudDriveMqttFaceDataItem::MergeFrom(const CloudDriveMqttFaceDataItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttFaceDataItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.face() != 0) {
    set_face(from.face());
  }
}

void CloudDriveMqttFaceDataItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttFaceDataItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudDriveMqttFaceDataItem::CopyFrom(const CloudDriveMqttFaceDataItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttFaceDataItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudDriveMqttFaceDataItem::IsInitialized() const {
  return true;
}

void CloudDriveMqttFaceDataItem::Swap(CloudDriveMqttFaceDataItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloudDriveMqttFaceDataItem::InternalSwap(CloudDriveMqttFaceDataItem* other) {
  using std::swap;
  swap(time_, other->time_);
  swap(face_, other->face_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloudDriveMqttFaceDataItem::GetMetadata() const {
  protobuf_CloudDriveMqttMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CloudDriveMqttMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CloudDriveMqttFaceDataItem

// int64 time = 1;
void CloudDriveMqttFaceDataItem::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 CloudDriveMqttFaceDataItem::time() const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttFaceDataItem.time)
  return time_;
}
void CloudDriveMqttFaceDataItem::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:io.nonda.onedata.proto.contract.CloudDriveMqttFaceDataItem.time)
}

// int32 face = 2;
void CloudDriveMqttFaceDataItem::clear_face() {
  face_ = 0;
}
::google::protobuf::int32 CloudDriveMqttFaceDataItem::face() const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttFaceDataItem.face)
  return face_;
}
void CloudDriveMqttFaceDataItem::set_face(::google::protobuf::int32 value) {
  
  face_ = value;
  // @@protoc_insertion_point(field_set:io.nonda.onedata.proto.contract.CloudDriveMqttFaceDataItem.face)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloudDriveMqttEmotionData::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloudDriveMqttEmotionData::CloudDriveMqttEmotionData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CloudDriveMqttMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionData)
}
CloudDriveMqttEmotionData::CloudDriveMqttEmotionData(const CloudDriveMqttEmotionData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      items_(from.items_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionData)
}

void CloudDriveMqttEmotionData::SharedCtor() {
  _cached_size_ = 0;
}

CloudDriveMqttEmotionData::~CloudDriveMqttEmotionData() {
  // @@protoc_insertion_point(destructor:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionData)
  SharedDtor();
}

void CloudDriveMqttEmotionData::SharedDtor() {
}

void CloudDriveMqttEmotionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloudDriveMqttEmotionData::descriptor() {
  protobuf_CloudDriveMqttMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CloudDriveMqttMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CloudDriveMqttEmotionData& CloudDriveMqttEmotionData::default_instance() {
  protobuf_CloudDriveMqttMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

CloudDriveMqttEmotionData* CloudDriveMqttEmotionData::New(::google::protobuf::Arena* arena) const {
  CloudDriveMqttEmotionData* n = new CloudDriveMqttEmotionData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CloudDriveMqttEmotionData::Clear() {
// @@protoc_insertion_point(message_clear_start:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear();
}

bool CloudDriveMqttEmotionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .io.nonda.onedata.proto.contract.CloudDriveMqttEmotionDataItem items = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionData)
  return false;
#undef DO_
}

void CloudDriveMqttEmotionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.nonda.onedata.proto.contract.CloudDriveMqttEmotionDataItem items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionData)
}

::google::protobuf::uint8* CloudDriveMqttEmotionData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.nonda.onedata.proto.contract.CloudDriveMqttEmotionDataItem items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->items(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionData)
  return target;
}

size_t CloudDriveMqttEmotionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .io.nonda.onedata.proto.contract.CloudDriveMqttEmotionDataItem items = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloudDriveMqttEmotionData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionData)
  GOOGLE_DCHECK_NE(&from, this);
  const CloudDriveMqttEmotionData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CloudDriveMqttEmotionData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionData)
    MergeFrom(*source);
  }
}

void CloudDriveMqttEmotionData::MergeFrom(const CloudDriveMqttEmotionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void CloudDriveMqttEmotionData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudDriveMqttEmotionData::CopyFrom(const CloudDriveMqttEmotionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudDriveMqttEmotionData::IsInitialized() const {
  return true;
}

void CloudDriveMqttEmotionData::Swap(CloudDriveMqttEmotionData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloudDriveMqttEmotionData::InternalSwap(CloudDriveMqttEmotionData* other) {
  using std::swap;
  items_.InternalSwap(&other->items_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloudDriveMqttEmotionData::GetMetadata() const {
  protobuf_CloudDriveMqttMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CloudDriveMqttMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CloudDriveMqttEmotionData

// repeated .io.nonda.onedata.proto.contract.CloudDriveMqttEmotionDataItem items = 1;
int CloudDriveMqttEmotionData::items_size() const {
  return items_.size();
}
void CloudDriveMqttEmotionData::clear_items() {
  items_.Clear();
}
const ::io::nonda::onedata::proto::contract::CloudDriveMqttEmotionDataItem& CloudDriveMqttEmotionData::items(int index) const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionData.items)
  return items_.Get(index);
}
::io::nonda::onedata::proto::contract::CloudDriveMqttEmotionDataItem* CloudDriveMqttEmotionData::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionData.items)
  return items_.Mutable(index);
}
::io::nonda::onedata::proto::contract::CloudDriveMqttEmotionDataItem* CloudDriveMqttEmotionData::add_items() {
  // @@protoc_insertion_point(field_add:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionData.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::io::nonda::onedata::proto::contract::CloudDriveMqttEmotionDataItem >*
CloudDriveMqttEmotionData::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionData.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::io::nonda::onedata::proto::contract::CloudDriveMqttEmotionDataItem >&
CloudDriveMqttEmotionData::items() const {
  // @@protoc_insertion_point(field_list:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionData.items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloudDriveMqttEmotionDataItem::kTimeFieldNumber;
const int CloudDriveMqttEmotionDataItem::kEmotionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloudDriveMqttEmotionDataItem::CloudDriveMqttEmotionDataItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CloudDriveMqttMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionDataItem)
}
CloudDriveMqttEmotionDataItem::CloudDriveMqttEmotionDataItem(const CloudDriveMqttEmotionDataItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  emotion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.emotion().size() > 0) {
    emotion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.emotion_);
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionDataItem)
}

void CloudDriveMqttEmotionDataItem::SharedCtor() {
  emotion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

CloudDriveMqttEmotionDataItem::~CloudDriveMqttEmotionDataItem() {
  // @@protoc_insertion_point(destructor:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionDataItem)
  SharedDtor();
}

void CloudDriveMqttEmotionDataItem::SharedDtor() {
  emotion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CloudDriveMqttEmotionDataItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloudDriveMqttEmotionDataItem::descriptor() {
  protobuf_CloudDriveMqttMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CloudDriveMqttMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CloudDriveMqttEmotionDataItem& CloudDriveMqttEmotionDataItem::default_instance() {
  protobuf_CloudDriveMqttMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

CloudDriveMqttEmotionDataItem* CloudDriveMqttEmotionDataItem::New(::google::protobuf::Arena* arena) const {
  CloudDriveMqttEmotionDataItem* n = new CloudDriveMqttEmotionDataItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CloudDriveMqttEmotionDataItem::Clear() {
// @@protoc_insertion_point(message_clear_start:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionDataItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  emotion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool CloudDriveMqttEmotionDataItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionDataItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string emotion = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_emotion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->emotion().data(), static_cast<int>(this->emotion().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "io.nonda.onedata.proto.contract.CloudDriveMqttEmotionDataItem.emotion"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionDataItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionDataItem)
  return false;
#undef DO_
}

void CloudDriveMqttEmotionDataItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionDataItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // string emotion = 2;
  if (this->emotion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->emotion().data(), static_cast<int>(this->emotion().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "io.nonda.onedata.proto.contract.CloudDriveMqttEmotionDataItem.emotion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->emotion(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionDataItem)
}

::google::protobuf::uint8* CloudDriveMqttEmotionDataItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionDataItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // string emotion = 2;
  if (this->emotion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->emotion().data(), static_cast<int>(this->emotion().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "io.nonda.onedata.proto.contract.CloudDriveMqttEmotionDataItem.emotion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->emotion(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionDataItem)
  return target;
}

size_t CloudDriveMqttEmotionDataItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionDataItem)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string emotion = 2;
  if (this->emotion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->emotion());
  }

  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloudDriveMqttEmotionDataItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionDataItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CloudDriveMqttEmotionDataItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CloudDriveMqttEmotionDataItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionDataItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionDataItem)
    MergeFrom(*source);
  }
}

void CloudDriveMqttEmotionDataItem::MergeFrom(const CloudDriveMqttEmotionDataItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionDataItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.emotion().size() > 0) {

    emotion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.emotion_);
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
}

void CloudDriveMqttEmotionDataItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionDataItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudDriveMqttEmotionDataItem::CopyFrom(const CloudDriveMqttEmotionDataItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionDataItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudDriveMqttEmotionDataItem::IsInitialized() const {
  return true;
}

void CloudDriveMqttEmotionDataItem::Swap(CloudDriveMqttEmotionDataItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloudDriveMqttEmotionDataItem::InternalSwap(CloudDriveMqttEmotionDataItem* other) {
  using std::swap;
  emotion_.Swap(&other->emotion_);
  swap(time_, other->time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloudDriveMqttEmotionDataItem::GetMetadata() const {
  protobuf_CloudDriveMqttMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CloudDriveMqttMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CloudDriveMqttEmotionDataItem

// int64 time = 1;
void CloudDriveMqttEmotionDataItem::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 CloudDriveMqttEmotionDataItem::time() const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionDataItem.time)
  return time_;
}
void CloudDriveMqttEmotionDataItem::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionDataItem.time)
}

// string emotion = 2;
void CloudDriveMqttEmotionDataItem::clear_emotion() {
  emotion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CloudDriveMqttEmotionDataItem::emotion() const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionDataItem.emotion)
  return emotion_.GetNoArena();
}
void CloudDriveMqttEmotionDataItem::set_emotion(const ::std::string& value) {
  
  emotion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionDataItem.emotion)
}
#if LANG_CXX11
void CloudDriveMqttEmotionDataItem::set_emotion(::std::string&& value) {
  
  emotion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionDataItem.emotion)
}
#endif
void CloudDriveMqttEmotionDataItem::set_emotion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  emotion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionDataItem.emotion)
}
void CloudDriveMqttEmotionDataItem::set_emotion(const char* value, size_t size) {
  
  emotion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionDataItem.emotion)
}
::std::string* CloudDriveMqttEmotionDataItem::mutable_emotion() {
  
  // @@protoc_insertion_point(field_mutable:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionDataItem.emotion)
  return emotion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CloudDriveMqttEmotionDataItem::release_emotion() {
  // @@protoc_insertion_point(field_release:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionDataItem.emotion)
  
  return emotion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CloudDriveMqttEmotionDataItem::set_allocated_emotion(::std::string* emotion) {
  if (emotion != NULL) {
    
  } else {
    
  }
  emotion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), emotion);
  // @@protoc_insertion_point(field_set_allocated:io.nonda.onedata.proto.contract.CloudDriveMqttEmotionDataItem.emotion)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloudDriveMqttLogData::kTypeFieldNumber;
const int CloudDriveMqttLogData::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloudDriveMqttLogData::CloudDriveMqttLogData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CloudDriveMqttMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.nonda.onedata.proto.contract.CloudDriveMqttLogData)
}
CloudDriveMqttLogData::CloudDriveMqttLogData(const CloudDriveMqttLogData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:io.nonda.onedata.proto.contract.CloudDriveMqttLogData)
}

void CloudDriveMqttLogData::SharedCtor() {
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CloudDriveMqttLogData::~CloudDriveMqttLogData() {
  // @@protoc_insertion_point(destructor:io.nonda.onedata.proto.contract.CloudDriveMqttLogData)
  SharedDtor();
}

void CloudDriveMqttLogData::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CloudDriveMqttLogData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloudDriveMqttLogData::descriptor() {
  protobuf_CloudDriveMqttMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CloudDriveMqttMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CloudDriveMqttLogData& CloudDriveMqttLogData::default_instance() {
  protobuf_CloudDriveMqttMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

CloudDriveMqttLogData* CloudDriveMqttLogData::New(::google::protobuf::Arena* arena) const {
  CloudDriveMqttLogData* n = new CloudDriveMqttLogData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CloudDriveMqttLogData::Clear() {
// @@protoc_insertion_point(message_clear_start:io.nonda.onedata.proto.contract.CloudDriveMqttLogData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool CloudDriveMqttLogData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:io.nonda.onedata.proto.contract.CloudDriveMqttLogData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "io.nonda.onedata.proto.contract.CloudDriveMqttLogData.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "io.nonda.onedata.proto.contract.CloudDriveMqttLogData.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:io.nonda.onedata.proto.contract.CloudDriveMqttLogData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:io.nonda.onedata.proto.contract.CloudDriveMqttLogData)
  return false;
#undef DO_
}

void CloudDriveMqttLogData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:io.nonda.onedata.proto.contract.CloudDriveMqttLogData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "io.nonda.onedata.proto.contract.CloudDriveMqttLogData.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "io.nonda.onedata.proto.contract.CloudDriveMqttLogData.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:io.nonda.onedata.proto.contract.CloudDriveMqttLogData)
}

::google::protobuf::uint8* CloudDriveMqttLogData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:io.nonda.onedata.proto.contract.CloudDriveMqttLogData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "io.nonda.onedata.proto.contract.CloudDriveMqttLogData.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "io.nonda.onedata.proto.contract.CloudDriveMqttLogData.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.nonda.onedata.proto.contract.CloudDriveMqttLogData)
  return target;
}

size_t CloudDriveMqttLogData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.nonda.onedata.proto.contract.CloudDriveMqttLogData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloudDriveMqttLogData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttLogData)
  GOOGLE_DCHECK_NE(&from, this);
  const CloudDriveMqttLogData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CloudDriveMqttLogData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.nonda.onedata.proto.contract.CloudDriveMqttLogData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.nonda.onedata.proto.contract.CloudDriveMqttLogData)
    MergeFrom(*source);
  }
}

void CloudDriveMqttLogData::MergeFrom(const CloudDriveMqttLogData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttLogData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void CloudDriveMqttLogData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttLogData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudDriveMqttLogData::CopyFrom(const CloudDriveMqttLogData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttLogData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudDriveMqttLogData::IsInitialized() const {
  return true;
}

void CloudDriveMqttLogData::Swap(CloudDriveMqttLogData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloudDriveMqttLogData::InternalSwap(CloudDriveMqttLogData* other) {
  using std::swap;
  type_.Swap(&other->type_);
  msg_.Swap(&other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloudDriveMqttLogData::GetMetadata() const {
  protobuf_CloudDriveMqttMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CloudDriveMqttMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CloudDriveMqttLogData

// string type = 1;
void CloudDriveMqttLogData::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CloudDriveMqttLogData::type() const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttLogData.type)
  return type_.GetNoArena();
}
void CloudDriveMqttLogData::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:io.nonda.onedata.proto.contract.CloudDriveMqttLogData.type)
}
#if LANG_CXX11
void CloudDriveMqttLogData::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.nonda.onedata.proto.contract.CloudDriveMqttLogData.type)
}
#endif
void CloudDriveMqttLogData::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.nonda.onedata.proto.contract.CloudDriveMqttLogData.type)
}
void CloudDriveMqttLogData::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.nonda.onedata.proto.contract.CloudDriveMqttLogData.type)
}
::std::string* CloudDriveMqttLogData::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:io.nonda.onedata.proto.contract.CloudDriveMqttLogData.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CloudDriveMqttLogData::release_type() {
  // @@protoc_insertion_point(field_release:io.nonda.onedata.proto.contract.CloudDriveMqttLogData.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CloudDriveMqttLogData::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:io.nonda.onedata.proto.contract.CloudDriveMqttLogData.type)
}

// string msg = 2;
void CloudDriveMqttLogData::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CloudDriveMqttLogData::msg() const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttLogData.msg)
  return msg_.GetNoArena();
}
void CloudDriveMqttLogData::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:io.nonda.onedata.proto.contract.CloudDriveMqttLogData.msg)
}
#if LANG_CXX11
void CloudDriveMqttLogData::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.nonda.onedata.proto.contract.CloudDriveMqttLogData.msg)
}
#endif
void CloudDriveMqttLogData::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.nonda.onedata.proto.contract.CloudDriveMqttLogData.msg)
}
void CloudDriveMqttLogData::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.nonda.onedata.proto.contract.CloudDriveMqttLogData.msg)
}
::std::string* CloudDriveMqttLogData::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:io.nonda.onedata.proto.contract.CloudDriveMqttLogData.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CloudDriveMqttLogData::release_msg() {
  // @@protoc_insertion_point(field_release:io.nonda.onedata.proto.contract.CloudDriveMqttLogData.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CloudDriveMqttLogData::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:io.nonda.onedata.proto.contract.CloudDriveMqttLogData.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloudDriveMqttReportStatusData::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloudDriveMqttReportStatusData::CloudDriveMqttReportStatusData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CloudDriveMqttMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.nonda.onedata.proto.contract.CloudDriveMqttReportStatusData)
}
CloudDriveMqttReportStatusData::CloudDriveMqttReportStatusData(const CloudDriveMqttReportStatusData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:io.nonda.onedata.proto.contract.CloudDriveMqttReportStatusData)
}

void CloudDriveMqttReportStatusData::SharedCtor() {
  type_ = 0;
  _cached_size_ = 0;
}

CloudDriveMqttReportStatusData::~CloudDriveMqttReportStatusData() {
  // @@protoc_insertion_point(destructor:io.nonda.onedata.proto.contract.CloudDriveMqttReportStatusData)
  SharedDtor();
}

void CloudDriveMqttReportStatusData::SharedDtor() {
}

void CloudDriveMqttReportStatusData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloudDriveMqttReportStatusData::descriptor() {
  protobuf_CloudDriveMqttMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CloudDriveMqttMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CloudDriveMqttReportStatusData& CloudDriveMqttReportStatusData::default_instance() {
  protobuf_CloudDriveMqttMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

CloudDriveMqttReportStatusData* CloudDriveMqttReportStatusData::New(::google::protobuf::Arena* arena) const {
  CloudDriveMqttReportStatusData* n = new CloudDriveMqttReportStatusData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CloudDriveMqttReportStatusData::Clear() {
// @@protoc_insertion_point(message_clear_start:io.nonda.onedata.proto.contract.CloudDriveMqttReportStatusData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear();
}

bool CloudDriveMqttReportStatusData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:io.nonda.onedata.proto.contract.CloudDriveMqttReportStatusData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:io.nonda.onedata.proto.contract.CloudDriveMqttReportStatusData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:io.nonda.onedata.proto.contract.CloudDriveMqttReportStatusData)
  return false;
#undef DO_
}

void CloudDriveMqttReportStatusData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:io.nonda.onedata.proto.contract.CloudDriveMqttReportStatusData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:io.nonda.onedata.proto.contract.CloudDriveMqttReportStatusData)
}

::google::protobuf::uint8* CloudDriveMqttReportStatusData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:io.nonda.onedata.proto.contract.CloudDriveMqttReportStatusData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.nonda.onedata.proto.contract.CloudDriveMqttReportStatusData)
  return target;
}

size_t CloudDriveMqttReportStatusData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.nonda.onedata.proto.contract.CloudDriveMqttReportStatusData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloudDriveMqttReportStatusData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttReportStatusData)
  GOOGLE_DCHECK_NE(&from, this);
  const CloudDriveMqttReportStatusData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CloudDriveMqttReportStatusData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.nonda.onedata.proto.contract.CloudDriveMqttReportStatusData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.nonda.onedata.proto.contract.CloudDriveMqttReportStatusData)
    MergeFrom(*source);
  }
}

void CloudDriveMqttReportStatusData::MergeFrom(const CloudDriveMqttReportStatusData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttReportStatusData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
}

void CloudDriveMqttReportStatusData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttReportStatusData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudDriveMqttReportStatusData::CopyFrom(const CloudDriveMqttReportStatusData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.nonda.onedata.proto.contract.CloudDriveMqttReportStatusData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudDriveMqttReportStatusData::IsInitialized() const {
  return true;
}

void CloudDriveMqttReportStatusData::Swap(CloudDriveMqttReportStatusData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloudDriveMqttReportStatusData::InternalSwap(CloudDriveMqttReportStatusData* other) {
  using std::swap;
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloudDriveMqttReportStatusData::GetMetadata() const {
  protobuf_CloudDriveMqttMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CloudDriveMqttMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CloudDriveMqttReportStatusData

// int32 type = 1;
void CloudDriveMqttReportStatusData::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 CloudDriveMqttReportStatusData::type() const {
  // @@protoc_insertion_point(field_get:io.nonda.onedata.proto.contract.CloudDriveMqttReportStatusData.type)
  return type_;
}
void CloudDriveMqttReportStatusData::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:io.nonda.onedata.proto.contract.CloudDriveMqttReportStatusData.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace contract
}  // namespace proto
}  // namespace onedata
}  // namespace nonda
}  // namespace io

// @@protoc_insertion_point(global_scope)
